---
# networking.k8s.io/v1/NetworkPolicy registry-facade
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: registry-facade
    gitpod.io/nodeService: registry-facade
  name: registry-facade
  namespace: default
spec:
  ingress:
    - {}
  podSelector:
    matchLabels:
      app: gitpod
      component: registry-facade
      gitpod.io/nodeService: registry-facade
  policyTypes:
    - Ingress
---
# networking.k8s.io/v1/NetworkPolicy openvsx-proxy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: openvsx-proxy
    gitpod.io/nodeService: openvsx-proxy
  name: openvsx-proxy
  namespace: default
spec:
  ingress:
    - ports:
        - port: 8080
          protocol: TCP
    - from:
        - namespaceSelector:
            matchLabels:
              chart: monitoring
          podSelector:
            matchLabels:
              component: server
      ports:
        - port: 8080
          protocol: TCP
  podSelector:
    matchLabels:
      app: gitpod
      component: openvsx-proxy
      gitpod.io/nodeService: openvsx-proxy
  policyTypes:
    - Ingress
---
# networking.k8s.io/v1/NetworkPolicy proxy-deny-all-allow-explicit
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: proxy
    gitpod.io/nodeService: proxy
  name: proxy-deny-all-allow-explicit
  namespace: default
spec:
  ingress:
    - ports:
        - port: 80
          protocol: TCP
        - port: 443
          protocol: TCP
        - port: 22
          protocol: TCP
    - from:
        - namespaceSelector:
            matchLabels:
              chart: monitoring
          podSelector:
            matchLabels:
              component: server
      ports:
        - port: 9500
          protocol: TCP
  podSelector:
    matchLabels:
      app: gitpod
      component: proxy
      gitpod.io/nodeService: proxy
  policyTypes:
    - Ingress
---
# networking.k8s.io/v1/NetworkPolicy image-builder-mk3
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: image-builder-mk3
    gitpod.io/nodeService: image-builder-mk3
  name: image-builder-mk3
  namespace: default
spec:
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              - 169.254.169.254/32
  ingress:
    - from:
        - podSelector:
            matchLabels:
              component: server
  podSelector:
    matchLabels:
      app: gitpod
      component: image-builder-mk3
      gitpod.io/nodeService: image-builder-mk3
  policyTypes:
    - Ingress
    - Egress
---
# networking.k8s.io/v1/NetworkPolicy dashboard-deny-all-allow-explicit
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: dashboard
    gitpod.io/nodeService: dashboard
  name: dashboard-deny-all-allow-explicit
  namespace: default
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              component: proxy
      ports:
        - port: 80
          protocol: TCP
  podSelector:
    matchLabels:
      app: gitpod
      component: dashboard
      gitpod.io/nodeService: dashboard
  policyTypes:
    - Ingress
---
# networking.k8s.io/v1/NetworkPolicy content-service
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: content-service
    gitpod.io/nodeService: content-service
  name: content-service
  namespace: default
spec:
  ingress:
    - {}
  podSelector:
    matchLabels:
      app: gitpod
      component: content-service
      gitpod.io/nodeService: content-service
  policyTypes:
    - Ingress
---
# networking.k8s.io/v1/NetworkPolicy workspace-default
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: workspace
    gitpod.io/nodeService: workspace
  name: workspace-default
  namespace: default
spec:
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              - 169.254.169.254/32
    - to:
        - podSelector:
            matchLabels:
              app: gitpod
              component: proxy
              gitpod.io/nodeService: proxy
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: gitpod
              component: proxy
              gitpod.io/nodeService: proxy
    - from:
        - podSelector:
            matchLabels:
              app: gitpod
              component: ws-proxy
              gitpod.io/nodeService: ws-proxy
    - from:
        - podSelector:
            matchLabels:
              app: gitpod
              component: agent-smith
              gitpod.io/nodeService: agent-smith
    - from:
        - podSelector:
            matchLabels:
              app: gitpod
              component: ws-daemon
              gitpod.io/nodeService: ws-daemon
    - from:
        - namespaceSelector:
            matchLabels:
              chart: monitoring
          podSelector:
            matchLabels:
              app: gitpod
              component: server
              gitpod.io/nodeService: server
      ports:
        - port: 23000
          protocol: TCP
  podSelector:
    matchLabels:
      app: gitpod
      component: workspace
      gitpod.io/networkpolicy: default
  policyTypes:
    - Ingress
    - Egress
---
# networking.k8s.io/v1/NetworkPolicy messagebus
# Source: rabbitmq/charts/rabbitmq/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: messagebus
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.24.6
    app.kubernetes.io/instance: RabbitMQ
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: RabbitMQ
  ingress:
    # Allow inbound connections
    - ports:
        - port: 4369  # EPMD
        - port: 5672
        - port: 5671
        - port: 25672
        - port: 15672
    # Allow prometheus scrapes
    - ports:
        - port: 9419
---
# networking.k8s.io/v1/NetworkPolicy server
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: server
    gitpod.io/nodeService: server
  name: server
  namespace: default
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              component: proxy
      ports:
        - port: 3000
          protocol: TCP
    - from:
        - namespaceSelector:
            matchLabels:
              chart: monitoring
          podSelector:
            matchLabels:
              component: proxy
      ports:
        - port: 9500
          protocol: TCP
    - from:
        - podSelector:
            matchLabels:
              component: gitpod
      ports:
        - port: 9000
          protocol: TCP
  podSelector:
    matchLabels:
      app: gitpod
      component: server
      gitpod.io/nodeService: server
  policyTypes:
    - Ingress
---
# networking.k8s.io/v1/NetworkPolicy agent-smith
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: agent-smith
    gitpod.io/nodeService: agent-smith
  name: agent-smith
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: gitpod
      component: agent-smith
      gitpod.io/nodeService: agent-smith
  policyTypes:
    - Ingress
---
# networking.k8s.io/v1/NetworkPolicy ws-proxy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-proxy
    gitpod.io/nodeService: ws-proxy
  name: ws-proxy
  namespace: default
spec:
  ingress:
    - ports:
        - port: 8080
          protocol: TCP
        - port: 9090
          protocol: TCP
        - port: 2200
          protocol: TCP
  podSelector:
    matchLabels:
      app: gitpod
      component: ws-proxy
      gitpod.io/nodeService: ws-proxy
  policyTypes:
    - Ingress
---
# networking.k8s.io/v1/NetworkPolicy ws-manager
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager
    gitpod.io/nodeService: ws-manager
  name: ws-manager
  namespace: default
spec:
  ingress:
    - {}
  podSelector:
    matchLabels:
      app: gitpod
      component: ws-manager
      gitpod.io/nodeService: ws-manager
  policyTypes:
    - Ingress
---
# networking.k8s.io/v1/NetworkPolicy blobserve
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: blobserve
    gitpod.io/nodeService: blobserve
  name: blobserve
  namespace: default
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              component: proxy
        - podSelector:
            matchLabels:
              component: ws-proxy
      ports:
        - port: 32224
          protocol: TCP
  podSelector:
    matchLabels:
      app: gitpod
      component: blobserve
      gitpod.io/nodeService: blobserve
  policyTypes:
    - Ingress
---
# networking.k8s.io/v1/NetworkPolicy ws-daemon
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-daemon
    gitpod.io/nodeService: ws-daemon
  name: ws-daemon
  namespace: default
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: gitpod
              component: ws-manager
              gitpod.io/nodeService: ws-manager
      ports:
        - port: 8080
          protocol: TCP
    - from:
        - podSelector:
            matchLabels:
              app: prometheus
              component: server
      ports:
        - port: 9500
          protocol: TCP
  podSelector:
    matchLabels:
      app: gitpod
      component: ws-daemon
      gitpod.io/nodeService: ws-daemon
  policyTypes:
    - Ingress
---
# v1/ResourceQuota gitpod-resource-quota
apiVersion: v1
kind: ResourceQuota
metadata:
  creationTimestamp: null
  name: gitpod-resource-quota
  namespace: default
spec:
  hard:
    pods: 10k
  scopeSelector:
    matchExpressions:
      - operator: In
        scopeName: PriorityClass
        values:
          - system-node-critical
status: {}
---
# cert-manager.io/v1/Issuer ca-issuer
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: cluster
    gitpod.io/nodeService: cluster
  name: ca-issuer
  namespace: default
spec:
  ca:
    secretName: ca-issuer-ca
status: {}
---
# cert-manager.io/v1/Issuer gitpod-selfsigned-issuer
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: cluster
    gitpod.io/nodeService: cluster
  name: gitpod-selfsigned-issuer
  namespace: default
spec:
  selfSigned: {}
status: {}
---
# cert-manager.io/v1/Certificate builtin-registry-facade-cert
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: registry-facade
    gitpod.io/nodeService: registry-facade
  name: builtin-registry-facade-cert
  namespace: default
spec:
  dnsNames:
    - reg.localhost
  duration: 2160h0m0s
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: ca-issuer
  secretName: builtin-registry-facade-cert
status: {}
---
# cert-manager.io/v1/Certificate ws-manager-tls
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager
    gitpod.io/nodeService: ws-manager
  name: ws-manager-tls
  namespace: default
spec:
  dnsNames:
    - gitpod.default
    - ws-manager.default.svc
    - ws-manager
    - ws-manager-dev
  duration: 2160h0m0s
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: ca-issuer
  secretName: ws-manager-tls
status: {}
---
# cert-manager.io/v1/Certificate ws-manager
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager
    gitpod.io/nodeService: ws-manager
  name: ws-manager
  namespace: default
spec:
  dnsNames:
    - registry-facade
    - server
    - ws-manager-bridge
    - ws-proxy
    - ws-manager
  duration: 2160h0m0s
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: ca-issuer
  secretName: ws-manager-client-tls
status: {}
---
# cert-manager.io/v1/Certificate ca-issuer-ca
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: cluster
    gitpod.io/nodeService: cluster
  name: ca-issuer-ca
  namespace: default
spec:
  commonName: ca-issuer-ca
  duration: 2160h0m0s
  isCA: true
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: gitpod-selfsigned-issuer
  privateKey:
    algorithm: ECDSA
    size: 256
  secretName: ca-issuer-ca
status: {}
---
# cert-manager.io/v1/Certificate builtin-registry-certs
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: docker-registry
    gitpod.io/nodeService: docker-registry
  name: builtin-registry-certs
  namespace: default
spec:
  dnsNames:
    - registry.default.svc.cluster.local
  duration: 2160h0m0s
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: ca-issuer
  secretName: builtin-registry-certs
status: {}
---
# cert-manager.io/v1/Certificate ws-daemon-tls
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-daemon
    gitpod.io/nodeService: ws-daemon
  name: ws-daemon-tls
  namespace: default
spec:
  dnsNames:
    - gitpod.default
    - ws-daemon.default.svc
    - ws-daemon
    - wsdaemon
  duration: 2160h0m0s
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: ca-issuer
  secretName: ws-daemon-tls
status: {}
---
# policy/v1beta1/PodSecurityPolicy default-ns-unprivileged
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: runtime/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
  creationTimestamp: null
  name: default-ns-unprivileged
  namespace: default
spec:
  allowPrivilegeEscalation: false
  fsGroup:
    ranges:
      - max: 65535
        min: 1
    rule: MustRunAs
  requiredDropCapabilities:
    - ALL
  runAsUser:
    rule: MustRunAsNonRoot
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
      - max: 65535
        min: 1
    rule: MustRunAs
  volumes:
    - configMap
    - emptyDir
    - projected
    - secret
    - persistentVolumeClaim
---
# policy/v1beta1/PodSecurityPolicy default-ns-registry-facade
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: runtime/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
  creationTimestamp: null
  labels:
    app: gitpod
    component: registry-facade
    gitpod.io/nodeService: registry-facade
  name: default-ns-registry-facade
spec:
  fsGroup:
    ranges:
      - max: 65535
        min: 1
    rule: MustRunAs
  hostNetwork: true
  hostPorts:
    - max: 33000
      min: 30000
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
      - max: 65535
        min: 1
    rule: MustRunAs
  volumes:
    - configMap
    - secret
    - emptyDir
    - hostPath
---
# policy/v1beta1/PodSecurityPolicy default-ns-restricted-root-user
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: runtime/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
  creationTimestamp: null
  name: default-ns-restricted-root-user
  namespace: default
spec:
  fsGroup:
    ranges:
      - max: 65535
        min: 1
    rule: MustRunAs
  hostNetwork: true
  hostPorts:
    - max: 33000
      min: 30000
  privileged: true
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
      - max: 65535
        min: 1
    rule: MustRunAs
  volumes:
    - configMap
    - projected
    - secret
    - emptyDir
    - persistentVolumeClaim
    - hostPath
---
# policy/v1beta1/PodSecurityPolicy default-ns-privileged
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: runtime/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
  creationTimestamp: null
  name: default-ns-privileged
  namespace: default
spec:
  allowPrivilegeEscalation: true
  allowedCapabilities:
    - '*'
  fsGroup:
    rule: RunAsAny
  hostIPC: true
  hostNetwork: true
  hostPID: true
  hostPorts:
    - max: 65535
      min: 0
  privileged: true
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
    - '*'
---
# policy/v1beta1/PodSecurityPolicy default-ns-workspace
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default,unconfined
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
    seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
  creationTimestamp: null
  name: default-ns-workspace
  namespace: default
spec:
  allowPrivilegeEscalation: true
  allowedCapabilities:
    - AUDIT_WRITE
    - FSETID
    - KILL
    - NET_BIND_SERVICE
    - SYS_PTRACE
  fsGroup:
    ranges:
      - max: 65535
        min: 1
    rule: MustRunAs
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
      - max: 65535
        min: 1
    rule: MustRunAs
  volumes:
    - configMap
    - projected
    - secret
    - hostPath
---
# policy/v1beta1/PodSecurityPolicy default-ns-privileged-unconfined
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
    apparmor.security.beta.kubernetes.io/allowedProfileNames: unconfined
    apparmor.security.beta.kubernetes.io/defaultProfileName: unconfined
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: runtime/default,unconfined
    seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
  creationTimestamp: null
  name: default-ns-privileged-unconfined
  namespace: default
spec:
  allowPrivilegeEscalation: true
  allowedCapabilities:
    - '*'
  fsGroup:
    rule: RunAsAny
  hostPID: true
  hostPorts:
    - max: 65535
      min: 0
  privileged: true
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
    - '*'
---
# policy/v1/PodDisruptionBudget messagebus
# Source: rabbitmq/charts/rabbitmq/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: messagebus
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.24.6
    app.kubernetes.io/instance: RabbitMQ
    app.kubernetes.io/managed-by: Helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: RabbitMQ
---
# v1/ServiceAccount workspace
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: workspace
    gitpod.io/nodeService: workspace
  name: workspace
  namespace: default
---
# v1/ServiceAccount ws-manager
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager
    gitpod.io/nodeService: ws-manager
  name: ws-manager
  namespace: default
---
# v1/ServiceAccount dashboard
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: dashboard
    gitpod.io/nodeService: dashboard
  name: dashboard
  namespace: default
---
# v1/ServiceAccount registry-facade
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: registry-facade
    gitpod.io/nodeService: registry-facade
  name: registry-facade
  namespace: default
---
# v1/ServiceAccount ws-daemon
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-daemon
    gitpod.io/nodeService: ws-daemon
  name: ws-daemon
  namespace: default
---
# v1/ServiceAccount gitpod
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: gitpod
    gitpod.io/nodeService: gitpod
  name: gitpod
  namespace: default
---
# v1/ServiceAccount nobody
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: nobody
    gitpod.io/nodeService: nobody
  name: nobody
  namespace: default
---
# v1/ServiceAccount blobserve
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: blobserve
    gitpod.io/nodeService: blobserve
  name: blobserve
  namespace: default
---
# v1/ServiceAccount db
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: db
    gitpod.io/nodeService: db
  name: db
  namespace: default
---
# v1/ServiceAccount migrations
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: migrations
    gitpod.io/nodeService: migrations
  name: migrations
  namespace: default
---
# v1/ServiceAccount agent-smith
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: agent-smith
    gitpod.io/nodeService: agent-smith
  name: agent-smith
  namespace: default
---
# v1/ServiceAccount ws-proxy
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-proxy
    gitpod.io/nodeService: ws-proxy
  name: ws-proxy
  namespace: default
---
# v1/ServiceAccount ws-manager-bridge
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager-bridge
    gitpod.io/nodeService: ws-manager-bridge
  name: ws-manager-bridge
  namespace: default
---
# v1/ServiceAccount server
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: server
    gitpod.io/nodeService: server
  name: server
  namespace: default
---
# v1/ServiceAccount minio
# Source: minio/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-9.0.6
    app.kubernetes.io/instance: Minio
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: minio
---
# v1/ServiceAccount proxy
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: proxy
    gitpod.io/nodeService: proxy
  name: proxy
  namespace: default
---
# v1/ServiceAccount docker-registry
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: docker-registry
    gitpod.io/nodeService: docker-registry
  name: docker-registry
  namespace: default
---
# v1/ServiceAccount content-service
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: content-service
    gitpod.io/nodeService: content-service
  name: content-service
  namespace: default
---
# v1/ServiceAccount openvsx-proxy
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: openvsx-proxy
    gitpod.io/nodeService: openvsx-proxy
  name: openvsx-proxy
  namespace: default
---
# v1/ServiceAccount rabbitmq
# Source: rabbitmq/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.24.6
    app.kubernetes.io/instance: RabbitMQ
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: messagebus
---
# v1/ServiceAccount image-builder-mk3
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: image-builder-mk3
    gitpod.io/nodeService: image-builder-mk3
  name: image-builder-mk3
  namespace: default
---
# v1/ServiceAccount ide-proxy
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ide-proxy
    gitpod.io/nodeService: ide-proxy
  name: ide-proxy
  namespace: default
---
# v1/Secret minio
# Source: minio/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-9.0.6
    app.kubernetes.io/instance: Minio
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  root-user: "WmhCSmdCOWdhcGxsYUhwSGY4Tjg="
  root-password: "dW5rWEh0cEN5cVhnWFFDWXRfcnk="
  key.json: ""
---
# v1/Secret registry-secret
# Source: docker-registry/charts/docker-registry/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: default
  labels:
    app: docker-registry
    chart: docker-registry-1.16.0
    heritage: Helm
    release: docker-registry
type: Opaque
data:
  haSharedSecret: "bUVwUWVZeXJEallkdGYzWA=="
  proxyUsername: ""
  proxyPassword: ""
---
# v1/Secret rabbitmq
# Source: rabbitmq/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.24.6
    app.kubernetes.io/instance: RabbitMQ
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  password: m0MjaVmROxmcEZiqCY3_
  username: gitpod
---
# v1/Secret messagebus-certificates-secret-core
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZkVENDQTEyZ0F3SUJBZ0lVRko4ZlFiMHdqUGpFRkdPQ2VWUHljVEtuVmdBd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1NqRUxNQWtHQTFVRUJoTUNRVlV4RXpBUkJnTlZCQWdNQ2xOdmJXVXRVM1JoZEdVeEZUQVRCZ05WQkFvTQpERlI1Y0dWR2IzZ2dSMjFpU0RFUE1BMEdBMVVFQ3d3R1IybDBjRzlrTUI0WERURTVNRFV5T0RBNU5UZzBORm9YCkRUSTVNRFV5TlRBNU5UZzBORm93U2pFTE1Ba0dBMVVFQmhNQ1FWVXhFekFSQmdOVkJBZ01DbE52YldVdFUzUmgKZEdVeEZUQVRCZ05WQkFvTURGUjVjR1ZHYjNnZ1IyMWlTREVQTUEwR0ExVUVDd3dHUjJsMGNHOWtNSUlDSWpBTgpCZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUFzbzBWY05vcE5jZXdtQjdZZGdJS0VoTHo4a3BmCldaMyttNUVndmlZS2tmKzQ1dDYreWg1cERKRHprT2Y1QWN6UHZKRTRYdlFoK0w1a0puNnBLaXpMYkYzVTdHSDcKVXJld2FTS3FGRnM0S2xjYkFJMHBtbnFLbHdKQzR3ZzI0MVVyQ2VzbUpEWHk2Q25vZzlhOHVvbUd2Y3N3dWRRZQpUNlhMSURNNFFyYUhUVWo1WUdwc0lwVUY1bm1ma2VjL3NDcHU5TGNVWlVwMy84TXBVSjlDZmxqSHpVakR0aWxuCjdBaUhVb0FGVDlDVUJQbWpiTURQODBpK2VIc2FLTFovWlVsWUJhbXJmcHl6UVIvUU5iQjA2dVRTUWV2emVGMUsKQWg0VXgxK0NVb0huKzdId2gxaFhCR3BUNHowWm1RbWwwSXVYRm1hTGYvaTZJWWVhL0szSnhUNDlPM0hXQmVXdApORkxlc1FKdXFSZ01zaHAzbVB0ZEExam0xZVNxVmE4eTIrRGh2UVhVYk5nL3BJdEdMNnNNdUxoTDJaKzZaRUppCkZxM1J3djJFR0wwa0h6a3dCbGhxUUVlbGZpWENsOElmR1VMU2tvVk9GU1hNanE0L2Vwamh1bnBRNTlWeXZZQlgKYURmMnQwdFRZa2RqTk1RaDh2RDJoMGp4dmVncE02VmxPSUJtTFRzZ0dzeERpTk1mWURhMjErWFBXTDJXQ2wvOApNL1AzZEhsKzU4UFl5eGhPL1Uwa2RBMW81ck1YT1NtMzVPTjBzMWtDY1FyTFg1eHY4OVJ1STB6L2lLZXVyTmFJCnVDN21Tb3lISGo3YVVENEUrdVVOa3Q4WTdHbnAxWW1hWjEreVZ6QkpQSCtweTN3ekd5aGtpYjlIcUhhSWxqNy8KaTZHTUorRlhjQUpEdXpjQ0F3RUFBYU5UTUZFd0hRWURWUjBPQkJZRUZGT2huNWFWZ2crV014YTBhM2owVDYvdQoyeUk1TUI4R0ExVWRJd1FZTUJhQUZGT2huNWFWZ2crV014YTBhM2owVDYvdTJ5STVNQThHQTFVZEV3RUIvd1FGCk1BTUJBZjh3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUYveG5qVTg4TzdBVFpMblY1Q1IvVWZiL1pWaE1mMzYKQXVGL1MrSktMWkZ2WGlabm1oMjlEa1EyNU5SWTN1V1JlT2RKMVZFN0tjeE9sZ2t1LysyZWt4ek5qTDlVNWZnegpRbVpQbFNTS05ZVHdCKy9PQXNYbG9YdTM3OFIzUSs0RENtTk5zazF5K3N2R2hIbkJNYjdLdHZUSXZlZjI0bTJvCnlRaUdPVGxWUmlRbTQ1VUNnQUNwek5xTllXalViQXlVM0d6dkF2b1RUbTJCN1VFbENncGdVQ2lXYWhTY013ZVgKSm9sSjY5UHkzcXdrcnZjOWZmZWd0dnk2clhSZkZTZ3k3QWw2NVJvNEVBOFVXNlRjSUdoV1RuWkJMQWFRSHVjNgo2T01BQ21yalN4SDAwcnhiUmdzcy9teHBqT2hNYmk1eExwblNrY0FWcDRmR3dRbUFQY0NzMHF3bUhjVEVyK0JsCkM5ZDNTUkxBZlB0c2hscGV4Vzl0MnEyZmVqVFFVVnJHY1ppSmlabnJyOVJ1Z2VMUlgveWxKOERDVklsQjJBREIKMTllRDArcGw2Ri9sQ09uUXJpazJlRjNVU01GY0tiNXlxYkZ3clN2b2E4QlZyc0pVdFdTS2RRWlhaZnBvSzZDbApoWGlvMkxKL3U1RE42R29HU1BXbk5nVHJoVHV2WGJlUk8yeG1KMHB4NERnck9jcENMdk5wdVRXRmVsdW9rR3pECmcwelMvNjNNZW1JWHVEemFxZ3ZONkZqQ1NNMnhYWExxNUJROHFDeWxpZE5EUTBSeko0ekd1cVp5RW0ydzNSRTEKWFgwQzQ1NzFUemJsUkZzbGdFV3B5a0pWcmFsTXVBc2tEVVR3U2xEZjRwTitWMmFzODVSY290YWs5dkF2d25rWgpCbWl5bDdVWGpzRE8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZNekNDQXhzQ0ZHamhiNWlQMWJNSWNtdCtBSWU4L0tzL2c5OTVNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1Fb3gKQ3pBSkJnTlZCQVlUQWtGVk1STXdFUVlEVlFRSURBcFRiMjFsTFZOMFlYUmxNUlV3RXdZRFZRUUtEQXhVZVhCbApSbTk0SUVkdFlrZ3hEekFOQmdOVkJBc01Ca2RwZEhCdlpEQWVGdzB4T1RBMU1qZ3hNVEV6TkRGYUZ3MHlPVEExCk1qVXhNVEV6TkRGYU1HSXhDekFKQmdOVkJBWVRBa0ZWTVJNd0VRWURWUVFJREFwVGIyMWxMVk4wWVhSbE1SVXcKRXdZRFZRUUtEQXhVZVhCbFJtOTRJRWR0WWtneER6QU5CZ05WQkFzTUJrZHBkSEJ2WkRFV01CUUdBMVVFQXd3TgpiWE5uWW5WekxXTnNhV1Z1ZERDQ0FpSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBT3BUCkxDY0dTb1JDRDk1TkV2RDlhZDAxRzQzbXdMemZkdkUrNVVrN04xcEV1L2JLaFFINUlwRHh6VkVhTDZEdnNHYWoKeUFzZ2ppT3ZUTTFTOTFOMGU3d2c2WS9oZmZXWksvOWd0ejBwTXI3MHo2QllKSXFQeldHWDVscjUxV0NlVWNVUgpjV0dNVWIxcmRwbVF0WFFhbU5jWFpFTGxzNzBsRGZSUEd4L3BhVU5pcjhaVU5hUjIraDN5RVpSYUI2dE9yRGE4ClpnemFjakZEcEZvMTRBeGlBOGhFZUlFdFpnbUI0TzhTZTZWSk92U3lPL3lnWmVlNEhuYU5vT2x5eEEzdXNFdUcKQUgvaHY4aWpyeGRBbkd4Mm5QRDhpZWxrUTFjbnl5dE83YzI5WXZiS1BWV2tQZUczd3VMSXh0b1Baam9SYVVidwpvb2w2Ui9VUU9UdmlGQmQzbDNOQ21UQkZJZ3ZqS3BPbnA4WDZVazZwdmVEVHZ0WFprZFNsaFVqeXd5cDJrV2pvCkYyTGFKYXhuak1sYktBUHNvOHljaGQyTE1WSHF0T0swS29SdVNvK0Q1TElUbUF4VTY0RFVCVzcrRXA3RGFxM2UKU2cwUm1HUWtxNk5WYjlCZ1hRbjV0b1NoV3JGTzk3QmxvSVFUQVpvQ2dhcjlrRTlvNDc4eXJJejZDWlpXOENRcgo0YUhvT0J3SjlIUkRKY0NrVnU5di9EWm5jRUZxaGNmMVpDeURGemhZaFRzekIzVjRLMDlqellzZzQzeU1UUEdiClUzbWxBZVIrVy9vazRmZmZFa2JCYXdZclI5NU5WNXpzbGVFN2E1Z1poQzRJd1p2c1RyWnJkUjYwM21DRVJmbzYKU1ZxRmJRdks1dG8ydHhST3daZEZEa1JmbFFEMUZHWTRrVmxoZXNwTEFnTUJBQUV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dJQkFEdEMxOHNQaFpQVzRDSjB3Mkx1K1N2b0tnN0hxZ1RKNVNaMWFJYVpUK21JR2NoZ0hMU05wN3BhCkNaUFU0YTArMGxwd0l3M3F5NUV2YnpucGYxcitrUVJLK1UwQkw0KzE3SGh4cmZCNDFIcU5meXUwY1UwR0dqMy8KV29xSXJCN0I4eXhZOEpES0pPREs1UllFa0dqYWRwZGNKMytTVDErMXNMMEtITVBLMlBjVXpTbGxWNVVuOU1vNAoxOGhyZm5IVlNsMnZ3RnZSeVgzTHZ4ZzdCdTRUWnJLelZ4NVZQK29IdmFJRXRFMW9SNkM0RlpteStHZDJZRnZ0CmcxRVNVVjZ4a20xWHhQeElhclc5bytzVk9ESG8zbnp3MGhEcDZXVCsxbCt3bVpKR09IenhWVHZFU29VMFo1ZDgKdWdtelNyVGFlaW9BMTF0eERrN0N5RmJoQTJPek1GR0p2eGN6cUkzMHZ3WVVDK3YrbVZCcWw4WFBjR24wNyt1KwpRTnBMZWJRWmszTDRsQ2ZPT0lYQVNxK2FvYURBdnV6eW5OSU1ueXAvL0dKU05tczdhNTRtcnB5T2pEdjNLNFYwCmlsQTB0eHlieXpkWWtGTFZNSlI0RHFzd3Fhakd0eGMzYjRUNzRjL1pUWVhSWkVkNTh1SmlWOUpMYjVNR01tc2MKWWFiN28wNlpORDAzeDgrRGN1MUFMZ2JhTFBWeTliM3lOKzk4UENhTkpWYWZwc05TSkN5VjZCM21uYTFuOHZXZApiK1FrRFNiUkh5ZGRjWnhBR0swTjdpeGRPN1hzNFNoeVZCZXpVQmJ2eDFna2d5YTZCWVoyZHVXbzR2OEpPamlHClQzM1ZWWkVUUFdZWHFyelhxQmpSYVQzRkxFWER6QmYzKzljaGxLYUpaaFNBRmtkcmgwVjIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBNmxNc0p3WktoRUlQM2swUzhQMXAzVFViamViQXZOOTI4VDdsU1RzM1drUzc5c3FGCkFma2lrUEhOVVJvdm9PK3dacVBJQ3lDT0k2OU16VkwzVTNSN3ZDRHBqK0Y5OVprci8yQzNQU2t5dnZUUG9GZ2sKaW8vTllaZm1Xdm5WWUo1UnhSRnhZWXhSdld0Mm1aQzFkQnFZMXhka1F1V3p2U1VOOUU4YkgrbHBRMkt2eGxRMQpwSGI2SGZJUmxGb0hxMDZzTnJ4bUROcHlNVU9rV2pYZ0RHSUR5RVI0Z1MxbUNZSGc3eEo3cFVrNjlMSTcvS0JsCjU3Z2VkbzJnNlhMRURlNndTNFlBZitHL3lLT3ZGMENjYkhhYzhQeUo2V1JEVnlmTEswN3R6YjFpOXNvOVZhUTkKNGJmQzRzakcyZzltT2hGcFJ2Q2lpWHBIOVJBNU8rSVVGM2VYYzBLWk1FVWlDK01xazZlbnhmcFNUcW05NE5PKwoxZG1SMUtXRlNQTERLbmFSYU9nWFl0b2xyR2VNeVZzb0EreWp6SnlGM1lzeFVlcTA0clFxaEc1S2o0UGtzaE9ZCkRGVHJnTlFGYnY0U25zTnFyZDVLRFJHWVpDU3JvMVZ2MEdCZENmbTJoS0Zhc1U3M3NHV2doQk1CbWdLQnF2MlEKVDJqanZ6S3NqUG9KbGxid0pDdmhvZWc0SEFuMGRFTWx3S1JXNzIvOE5tZHdRV3FGeC9Wa0xJTVhPRmlGT3pNSApkWGdyVDJQTml5RGpmSXhNOFp0VGVhVUI1SDViK2lUaDk5OFNSc0ZyQml0SDNrMVhuT3lWNFR0cm1CbUVMZ2pCCm0reE90bXQxSHJUZVlJUkYranBKV29WdEM4cm0yamEzRkU3QmwwVU9SRitWQVBVVVpqaVJXV0Y2eWtzQ0F3RUEKQVFLQ0FnRUF0QnBoWVUxUWtQOUZ1eE42YjRnWGlsSjdiMEhnK2txMzNReitwcDdCR0x5anpEZzBxeU9XRWRvSQplVUdyUWdONGppdHNZa0VQZnhZSjdmYks2bllwZEp2SGFUTmo0UlZ0MzhleWoydk8rVDZwSnhFWVpQZktZQ3lrCmZXQnhST1hxNjVGUW1DMkYxaFYyL3VsZXpuSnk3eituYkZPcEpzUUlTYk5Ub2QrQmJLMjVkTExjMkNBcWRrSE0KaVQzNWp3M1ZCKzBlY3RxajBvR3ZIVGN6a2REMEgwV2hhWWcvV1NkZWYrS3c3b1d1cnMwZmxqaWltc3ZGZmxHMQpVRGxKdjN1cVBTSXQyQnpuajR0ZjFIdHd2MTBibTQ0L1lnZ1NTamJuemMzSXNjM1M5dVRTNTdScGE4Z1dIc0U3Ck5mZUlGekd5dlRmUGRlTnEwMDA0OEhJQUIxbUFLVHFDdVdYSWRtWUMzcFJPSU5YZTVRY3N2M1N1S09UMFFhTjYKQU9zVXNvbTBOYmxJd1YyV3VnMTBZNGVWZ1ZTRDlvMFlyemdzK0Y1K2haZjBFd21qNllzRFdCQUVzaFQ5bXBnQgpVY3IvbmR4Mi9kc1pncDRQTGZtd3ZsUVkzdFRvYjYzVlRrUlJTYTBIVENPK09TQ09TaFhhVmFiM1VXMXNNME5oCnZpKytPMnFMc3pjNHlZQXdkYWFJWEo4RC90TVU5aHRzWnRYRWw0TFNDT1JSVzhrT25qaVZ1dDU4Rk9XRiszNW8KTTZ0eHE4V2RJOGxWUXpJcGdLUStsdEUwcDJwaWNVQ2o2SlAyRzVSUVhpV293cEZjRndDelk3MEtiNjhxejA5Qwppc21BdlNjTkE3cmdVZmhKZHhrRmRFY0pXTVlhbVZDdjFSb01yZExxV1IwUm5Cb1VCOEVDZ2dFQkFQbGNyNkc5CkdvanlJV3p5M3NSUTRrdkkySktNRGdTbG1sVDZEdUljUlZpZERQTWdaUnZ3c1BGdkVnUTBMRmdzckwyTERXZXgKU1FCM09yYks2WUU2eXkvaHZUME1qWFVrbCsvc3I5UW15enZjS1JkNE11MEJOYjlIeWZnV1BENDFVQlA1d0pCZAo0ZnZURTg1emhsdEliZEJpNDJZbmR2NUVUdlRHUW9keW1YenZHUlhrbmJPZ0E3NWZyaHRnZ0VWNjRTZHh6WFBMCkdLQndmZkt6Q1hES1FNTTkxWmV6R3ZzYmJYNWYzU0ltZmlQSkNiOWpMTHhkcDRVaEZTdnU3Y25WalJnMnRRTjUKNVJuTnVFOVNuVk1qSVhZQi8ybVYxR2pVN1U0TEdYZG5oaWRnZ1BBMzZLckRjcitoSEJ1N0JhSGY2RmJpYllJWQorUGV3T25LaXJkMHF2V01DZ2dFQkFQQ1FBM09DdVRaUVA0aWFVK056clM5VmxKamVPYTFnb3l2ME05YkVpK0hFCmQ3S3paNm9LVlpraFR6SVNKY3R5c3BRSUVOYzV4cUFySXVLQ3ZRZHB1YzJuZ0lVcVFLT2xhUGxzQmtXcHJCSXMKbFZCSk5yNGFxdDFXRU9zNmRmVGR6czNkekxLazRMd1liY2M5d2dTdzRxcDhFaUZnT1ZjWlUzL0NkcXpwTGw1VQpFOHJGbmUwd2grZThoV1FmbW5qbTNWbWYyR2M4dzhJcTIvL3FjWGViWVBpdnp1Tm1lRE4xRXVMekt3VEtGdWgxCnRZaHNQZjJKTlA3dEQzWHB0SkNWS0R2VWE0cjVsTGxza1FNZGlMQm4rSjNpdUp4MHkrcXhSVUNJWnN3c3JpRHEKWVJRTjdHNzJzQVh4aU1mVTdPbDhHbjVSRFZ0a1NiSEVkOWlwWFFJL3Ava0NnZ0VBWXRZUjV4R0ZDdkt0dlBrbQp3cmtzZU0xS3lnc3BJejVnUlg0M2wvZU1wT3JhenlMdjhIc2VKeFBYR0VOMXNCMUUrbnU2L0hhUWNOYlJOdEtHCmF1cGF6c2V5c2hmZm1hYS9jaUZtTDdpUXBWRkdHRDlVTUF4aXVVWkREMG9BNXNkS3ppQVg2eURMQ1gxSVJIUVYKdE9pb1hnaFVDWkZxNEsxQ2ZsSjIzQ2pZSFdUSGxKM2d3K21Ra2t4cVBmK3AxK0EwamVYVmdTZm13dkRUZXZicgpyd0Q3V21lUDJXanNNTXRXUXRqTVZWVGNlbUtjc25ja3JDU1MyWG1iWXFaNUtaNnpKZjNKRVcrbkZ1c3JPb1dNClJmK09xNjl2QlBLV0ZsY1BGL2ZlU0MySVJ1TkJOL1Z4Q3Y0YzVVZCtWSjkwUkF6emtqeDlHeXU2d3JIZStNRHkKR005djhRS0NBUUIwYSs0UHFCTkVzdCtjbDd2RGwwY1lZbDJSQWZOOThnZm1ETUJOeno4M1d5TG16Q1orUjVRWAprT1JJQWpwaVZMY1NKemtuUUNIZGdDTFk1cGJmRUk3SWRha2dTVXVSSjBzL2NzVXlUNlFrQTRtYm1tTXc2NjBICmcxQ2ExdWNoUTN1RGJEVlZ1Nis3dUVMZ3F3WEx5V05aU01ScGZLMGpkdkZQSW1qVzA5OEo3YnpLWkl0Q3NEc0YKcnRvTGs3UHBrU2xNNTZ3T2duem02bUVnWUhEYmhzb09jTjg2ZEd2MTAxSDVuZCtTNk03Zlg2QWtUdVpOWG1yVQplUndEWDhCd1BJK0ZMUStDNmJqTmFEcGgvSmdiYjZZRm15VG5LeXRKQU5QWUlHdEhvdFArd0ErTmFoT2p2Q1dDCkt0dWNnbkxKcUxNVnNObzdBYlVjb0UyMEFIc3Z6R2paQW9JQkFEaE52aUJlWmZNSUZuWjVvMzF3YVdsM0phQjMKTzFZcStiVXM0cmJjMnRvaVVGVTdyZTZuV211b202RzUwQmdBTmpnNzlwZGt2Q1ZUUkNYRi8wR3VDd081TVd5OQpNR2VuRHB3NllCc29Fa3Z4ZC9yc1hlN0kvNVFDV3lod0VSRFZtV0RONlZWdXJEbDNDVXJyVGIxNEd3dldaRktLCnd0Rzl4am9vZlJOc1U0Y09tQk1JdnhNK25UaTFKaFBrQXVlUk8wank0a2hEdkFPM0FIdGd2NWp2d0VOZXg1Qk8KN3l0T0FNcDkxeVVmQjB6bis5dXU5b1l0dDlIYmZxelJ2UmhSK3Y3bU90eGRtU1krM1FLbzFDdnlLSHZwYVB0VwpJRGNraUpFUmw1cjlldkhHd0dFWW8zQkl4aGxkTThsd3NFWFJHaTNDRjNUQnpzZVR0ZERaSGRCeHhmTT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: rabbitmq
    gitpod.io/nodeService: rabbitmq
  name: messagebus-certificates-secret-core
  namespace: default
---
# v1/Secret load-definition
# Source: rabbitmq/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: load-definition
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.24.6
    app.kubernetes.io/instance: RabbitMQ
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  load_definition.json: '{"users":[{"name":"gitpod","password":"m0MjaVmROxmcEZiqCY3_","tags":"administrator"}],"vhosts":[{"name":"/"}],"parameters":[],"permissions":[{"user":"gitpod","vhost":"/","configure":".*","write":".*","read":".*"}],"exchanges":[{"name":"gitpod.ws.local","vhost":"/","type":"topic","durable":true,"auto_delete":false},{"name":"consensus-leader","vhost":"/","type":"fanout","durable":false,"auto_delete":false}],"bindings":[],"queues":[{"name":"consensus-peers","vhost":"/","durable":false,"auto_delete":false,"arguments":{}},{"name":"pwsupdatable","vhost":"/","durable":true,"auto_delete":false,"arguments":{}}],"policies":[{"name":"ha-all","vhost":"/","pattern":".*","definition":{"ha-mode":"all","ha-sync-mode":"automatic","ha-sync-batch-size":5}}]}'
---
# v1/Secret messagebus
# Source: rabbitmq/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: messagebus
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.24.6
    app.kubernetes.io/instance: RabbitMQ
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
---
# v1/Secret messagebus-erlang-cookie
apiVersion: v1
data:
  rabbitmq-erlang-cookie: RW1UaHVqbVZ3eGd5MmFsOWtWcWc=
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: rabbitmq
    gitpod.io/nodeService: rabbitmq
  name: messagebus-erlang-cookie
  namespace: default
---
# v1/Secret builtin-registry-auth
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5sb2NhbGhvc3QiOnsiYXV0aCI6IlVTNVNaVzF5T0ZaalJ6YzRZa2xvWXpsbVVHNDZWbEZUU3pGdU5FVkRXVWhmVVZWc1VIRkhUMGM9In19fQ==
  password: VlFTSzFuNEVDWUhfUVVsUHFHT0c=
  user: US5SZW1yOFZjRzc4YkloYzlmUG4=
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: docker-registry
    gitpod.io/nodeService: docker-registry
  name: builtin-registry-auth
  namespace: default
type: kubernetes.io/dockerconfigjson
---
# v1/Secret mysql
apiVersion: v1
data:
  database: Z2l0cG9k
  encryptionKeys: WwogIHsKICAgICJuYW1lIjogImdlbmVyYWwiLAogICAgInZlcnNpb24iOiAxLAogICAgInByaW1hcnkiOiB0cnVlLAogICAgIm1hdGVyaWFsIjogIjR1R2gxcTh5MkRZcnlKd3JWTUhzMGtXWEpscXZIV1d0L0tKdU5pMDRlZEk9IgogIH0KXQ==
  host: ZGI=
  password: akJ6Vk1lMnc0WWk3R2FnYWRzeUI=
  port: MzMwNg==
  username: Z2l0cG9k
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: db
    gitpod.io/nodeService: db
  name: mysql
  namespace: default
---
# v1/Secret db-password
apiVersion: v1
data:
  mysql-password: akJ6Vk1lMnc0WWk3R2FnYWRzeUI=
  mysql-root-password: UEhlak1mc0x2ZkxjRzFEcnM0MGg=
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: db
    gitpod.io/nodeService: db
  name: db-password
  namespace: default
---
# v1/ConfigMap content-service
apiVersion: v1
data:
  config.json: |-
    {
      "service": {
        "address": ":8080",
        "tls": {
          "ca": "",
          "crt": "",
          "key": ""
        }
      },
      "prometheus": {
        "address": ":9500"
      },
      "pprof": {
        "address": ":6060"
      },
      "storage": {
        "stage": "",
        "kind": "minio",
        "gcloud": {
          "credentialsFile": "",
          "region": "",
          "projectId": "",
          "parallelUpload": 0,
          "maximumBackupCount": 0
        },
        "minio": {
          "endpoint": "minio.default.svc.cluster.local:9000",
          "accessKey": "ZhBJgB9gapllaHpHf8N8",
          "accessKeyFile": "",
          "secretKey": "unkXHtpCyqXgXQCYt_ry",
          "secretKeyFile": "",
          "region": "local",
          "parallelUpload": 6
        },
        "backupTrail": {
          "enabled": true,
          "maxLength": 3
        },
        "blobQuota": 5368709120
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: content-service
    gitpod.io/nodeService: content-service
  name: content-service
  namespace: default
---
# v1/ConfigMap gitpod-app
apiVersion: v1
data:
  app.yaml: |
    apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: docker-registry
        gitpod.io/nodeService: docker-registry
      name: builtin-registry-certs
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: docker-registry
        gitpod.io/nodeService: docker-registry
      name: docker-registry
      namespace: default
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: docker-registry
        gitpod.io/nodeService: docker-registry
      name: builtin-registry-auth
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: docker-registry
        gitpod.io/nodeService: docker-registry
      name: docker-registry
      namespace: default
    ---
    apiVersion: cert-manager.io/v1
    kind: Issuer
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: cluster
        gitpod.io/nodeService: cluster
      name: gitpod-selfsigned-issuer
      namespace: default
    ---
    apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: cluster
        gitpod.io/nodeService: cluster
      name: ca-issuer-ca
      namespace: default
    ---
    apiVersion: cert-manager.io/v1
    kind: Issuer
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: cluster
        gitpod.io/nodeService: cluster
      name: ca-issuer
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      creationTimestamp: null
      name: default-kube-rbac-proxy
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      creationTimestamp: null
      name: default-ns-psp:privileged
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      creationTimestamp: null
      name: default-ns-psp:restricted-root-user
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      creationTimestamp: null
      name: default-ns-psp:unprivileged
    ---
    apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    metadata:
      annotations:
        apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
        apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
        seccomp.security.alpha.kubernetes.io/allowedProfileNames: runtime/default
        seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
      creationTimestamp: null
      name: default-ns-privileged
      namespace: default
    ---
    apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    metadata:
      annotations:
        apparmor.security.beta.kubernetes.io/allowedProfileNames: unconfined
        apparmor.security.beta.kubernetes.io/defaultProfileName: unconfined
        seccomp.security.alpha.kubernetes.io/allowedProfileNames: runtime/default,unconfined
        seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
      creationTimestamp: null
      name: default-ns-privileged-unconfined
      namespace: default
    ---
    apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    metadata:
      annotations:
        apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
        apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
        seccomp.security.alpha.kubernetes.io/allowedProfileNames: runtime/default
        seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
      creationTimestamp: null
      name: default-ns-restricted-root-user
      namespace: default
    ---
    apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    metadata:
      annotations:
        apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
        apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
        seccomp.security.alpha.kubernetes.io/allowedProfileNames: runtime/default
        seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
      creationTimestamp: null
      name: default-ns-unprivileged
      namespace: default
    ---
    apiVersion: v1
    kind: ResourceQuota
    metadata:
      creationTimestamp: null
      name: gitpod-resource-quota
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      name: default-ns-nobody
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: nobody
        gitpod.io/nodeService: nobody
      name: nobody
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: gitpod
        gitpod.io/nodeService: gitpod
      name: gitpod
      namespace: default
    ---
    apiVersion: batch/v1
    kind: CronJob
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: gitpod
        gitpod.io/nodeService: gitpod
      name: gitpod-telemetry
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: gitpod
        gitpod.io/nodeService: gitpod
      name: gitpod
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: gitpod
        gitpod.io/nodeService: gitpod
      name: gitpod
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: content-service
        gitpod.io/nodeService: content-service
      name: content-service
      namespace: default
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: content-service
        gitpod.io/nodeService: content-service
      name: content-service
      namespace: default
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: content-service
        gitpod.io/nodeService: content-service
      name: content-service
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: content-service
        gitpod.io/nodeService: content-service
      name: content-service
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: content-service
        gitpod.io/nodeService: content-service
        kind: service
      name: content-service
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: content-service
        gitpod.io/nodeService: content-service
      name: content-service
      namespace: default
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: dashboard
        gitpod.io/nodeService: dashboard
      name: dashboard
      namespace: default
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: dashboard
        gitpod.io/nodeService: dashboard
      name: dashboard-deny-all-allow-explicit
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: dashboard
        gitpod.io/nodeService: dashboard
      name: dashboard
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: dashboard
        gitpod.io/nodeService: dashboard
        kind: service
      name: dashboard
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: dashboard
        gitpod.io/nodeService: dashboard
      name: dashboard
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: db
        gitpod.io/nodeService: db
      name: db-init-scripts
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: db
        gitpod.io/nodeService: db
      name: db
      namespace: default
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: db
        gitpod.io/nodeService: db
      name: db-password
      namespace: default
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: db
        gitpod.io/nodeService: db
      name: mysql
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: db
        gitpod.io/nodeService: db
      name: db
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: db
        gitpod.io/nodeService: db
      name: db
      namespace: default
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ide-proxy
        gitpod.io/nodeService: ide-proxy
      name: ide-proxy
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ide-proxy
        gitpod.io/nodeService: ide-proxy
      name: ide-proxy
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ide-proxy
        gitpod.io/nodeService: ide-proxy
        kind: service
      name: ide-proxy
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ide-proxy
        gitpod.io/nodeService: ide-proxy
      name: ide-proxy
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: image-builder-mk3
        gitpod.io/nodeService: image-builder-mk3
      name: default-ns-image-builder-mk3
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: image-builder-mk3
        gitpod.io/nodeService: image-builder-mk3
      name: image-builder-mk3-config
      namespace: default
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: image-builder-mk3
        gitpod.io/nodeService: image-builder-mk3
      name: image-builder-mk3
      namespace: default
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: image-builder-mk3
        gitpod.io/nodeService: image-builder-mk3
      name: image-builder-mk3
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: image-builder-mk3
        gitpod.io/nodeService: image-builder-mk3
      name: image-builder-mk3
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: image-builder-mk3
        gitpod.io/nodeService: image-builder-mk3
      name: default-image-builder-mk3-proxy-kube-rbac-proxy
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: image-builder-mk3
        gitpod.io/nodeService: image-builder-mk3
        kind: service
      name: image-builder-mk3
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: image-builder-mk3
        gitpod.io/nodeService: image-builder-mk3
      name: image-builder-mk3
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: migrations
        gitpod.io/nodeService: migrations
      name: migrations
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: migrations
        gitpod.io/nodeService: migrations
      name: migrations
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: minio
        gitpod.io/nodeService: minio
      name: minio
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: openvsx-proxy
        gitpod.io/nodeService: openvsx-proxy
      name: openvsx-proxy-config
      namespace: default
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: openvsx-proxy
        gitpod.io/nodeService: openvsx-proxy
      name: openvsx-proxy
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: openvsx-proxy
        gitpod.io/nodeService: openvsx-proxy
      name: openvsx-proxy
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: openvsx-proxy
        gitpod.io/nodeService: openvsx-proxy
      name: default-openvsx-proxy-kube-rbac-proxy
    ---
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: openvsx-proxy
        gitpod.io/nodeService: openvsx-proxy
      name: openvsx-proxy
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: openvsx-proxy
        gitpod.io/nodeService: openvsx-proxy
        kind: service
      name: openvsx-proxy
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: openvsx-proxy
        gitpod.io/nodeService: openvsx-proxy
      name: openvsx-proxy
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: proxy
        gitpod.io/nodeService: proxy
      name: proxy-config
      namespace: default
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: proxy
        gitpod.io/nodeService: proxy
      name: proxy
      namespace: default
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: proxy
        gitpod.io/nodeService: proxy
      name: proxy-deny-all-allow-explicit
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: proxy
        gitpod.io/nodeService: proxy
      name: proxy
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: proxy
        gitpod.io/nodeService: proxy
      name: default-proxy-kube-rbac-proxy
    ---
    apiVersion: v1
    kind: Service
    metadata:
      annotations:
        cloud.google.com/neg: '{"exposed_ports": {"80":{},"443": {}}}'
        external-dns.alpha.kubernetes.io/hostname: localhost,*.localhost,*.ws.localhost
      creationTimestamp: null
      labels:
        app: gitpod
        component: proxy
        gitpod.io/nodeService: proxy
        kind: service
      name: proxy
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: proxy
        gitpod.io/nodeService: proxy
      name: proxy
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: rabbitmq
        gitpod.io/nodeService: rabbitmq
      name: rabbitmq
      namespace: default
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: rabbitmq
        gitpod.io/nodeService: rabbitmq
      name: messagebus-erlang-cookie
      namespace: default
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: rabbitmq
        gitpod.io/nodeService: rabbitmq
      name: messagebus-certificates-secret-core
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: server
        gitpod.io/nodeService: server
      name: server-config
      namespace: default
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: server
        gitpod.io/nodeService: server
      name: server
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: server
        gitpod.io/nodeService: server
      name: server-ide-config
      namespace: default
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: server
        gitpod.io/nodeService: server
      name: server
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: server
        gitpod.io/nodeService: server
      name: server
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: server
        gitpod.io/nodeService: server
      name: server
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: server
        gitpod.io/nodeService: server
      name: default-server-rb-kube-rbac-proxy
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: server
        gitpod.io/nodeService: server
      name: server-unprivileged
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: server
        gitpod.io/nodeService: server
        kind: service
      name: server
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: server
        gitpod.io/nodeService: server
      name: server
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager-bridge
        gitpod.io/nodeService: ws-manager-bridge
      name: ws-manager-bridge-config
      namespace: default
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager-bridge
        gitpod.io/nodeService: ws-manager-bridge
      name: ws-manager-bridge
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager-bridge
        gitpod.io/nodeService: ws-manager-bridge
      name: ws-manager-bridge
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager-bridge
        gitpod.io/nodeService: ws-manager-bridge
      name: ws-manager-bridge
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: agent-smith
        gitpod.io/nodeService: agent-smith
      name: agent-smith
      namespace: default
    ---
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      annotations:
        gitpod.io/checksum_config: 414321a48d5cd8c8f0fe209b171b54b3e265b3fa9e892f980a5618b999828be7
      creationTimestamp: null
      labels:
        app: gitpod
        component: agent-smith
        gitpod.io/nodeService: agent-smith
      name: agent-smith
      namespace: default
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: agent-smith
        gitpod.io/nodeService: agent-smith
      name: agent-smith
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: agent-smith
        gitpod.io/nodeService: agent-smith
      name: agent-smith
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: agent-smith
        gitpod.io/nodeService: agent-smith
      name: agent-smith
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: agent-smith
        gitpod.io/nodeService: agent-smith
      name: default-agent-smith-rb-kube-rbac-proxy
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: agent-smith
        gitpod.io/nodeService: agent-smith
      name: agent-smith
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: blobserve
        gitpod.io/nodeService: blobserve
      name: blobserve
      namespace: default
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: blobserve
        gitpod.io/nodeService: blobserve
      name: blobserve
      namespace: default
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: blobserve
        gitpod.io/nodeService: blobserve
      name: blobserve
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: blobserve
        gitpod.io/nodeService: blobserve
      name: blobserve
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: blobserve
        gitpod.io/nodeService: blobserve
      name: default-blobserve-kube-rbac-proxy
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: blobserve
        gitpod.io/nodeService: blobserve
        kind: service
      name: blobserve
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: blobserve
        gitpod.io/nodeService: blobserve
      name: blobserve
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: registry-facade
        gitpod.io/nodeService: registry-facade
      name: default-ns-registry-facade
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: registry-facade
        gitpod.io/nodeService: registry-facade
      name: registry-facade
      namespace: default
    ---
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: registry-facade
        gitpod.io/nodeService: registry-facade
      name: registry-facade
      namespace: default
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: registry-facade
        gitpod.io/nodeService: registry-facade
      name: registry-facade
      namespace: default
    ---
    apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    metadata:
      annotations:
        apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
        apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
        seccomp.security.alpha.kubernetes.io/allowedProfileNames: runtime/default
        seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
      creationTimestamp: null
      labels:
        app: gitpod
        component: registry-facade
        gitpod.io/nodeService: registry-facade
      name: default-ns-registry-facade
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: registry-facade
        gitpod.io/nodeService: registry-facade
      name: default-registry-facade-rb
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: registry-facade
        gitpod.io/nodeService: registry-facade
      name: default-registry-facade-kube-rbac-proxy
    ---
    apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: registry-facade
        gitpod.io/nodeService: registry-facade
      name: builtin-registry-facade-cert
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: registry-facade
        gitpod.io/nodeService: registry-facade
        kind: service
      name: registry-facade
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: registry-facade
        gitpod.io/nodeService: registry-facade
      name: registry-facade
      namespace: default
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: workspace
        gitpod.io/nodeService: workspace
      name: workspace-default
      namespace: default
    ---
    apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    metadata:
      annotations:
        apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default,unconfined
        apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
        seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
        seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
      creationTimestamp: null
      name: default-ns-workspace
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: workspace
        gitpod.io/nodeService: workspace
      name: workspace
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: workspace
        gitpod.io/nodeService: workspace
      name: workspace
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: workspace
        gitpod.io/nodeService: workspace
      name: workspace
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-daemon
        gitpod.io/nodeService: ws-daemon
      name: default-ns-ws-daemon
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-daemon
        gitpod.io/nodeService: ws-daemon
      name: ws-daemon
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-daemon
        gitpod.io/nodeService: ws-daemon
      name: ws-daemon
      namespace: default
    ---
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-daemon
        gitpod.io/nodeService: ws-daemon
      name: ws-daemon
      namespace: default
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-daemon
        gitpod.io/nodeService: ws-daemon
      name: ws-daemon
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-daemon
        gitpod.io/nodeService: ws-daemon
      name: default-ws-daemon-rb-kube-rbac-proxy
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-daemon
        gitpod.io/nodeService: ws-daemon
      name: default-ws-daemon-rb
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-daemon
        gitpod.io/nodeService: ws-daemon
        kind: service
      name: ws-daemon
      namespace: default
    ---
    apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-daemon
        gitpod.io/nodeService: ws-daemon
      name: ws-daemon-tls
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager
        gitpod.io/nodeService: ws-manager
      name: ws-manager
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager
        gitpod.io/nodeService: ws-manager
      name: workspace-templates
      namespace: default
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager
        gitpod.io/nodeService: ws-manager
      name: ws-manager
      namespace: default
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager
        gitpod.io/nodeService: ws-manager
      name: ws-manager
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager
        gitpod.io/nodeService: ws-manager
      name: ws-manager
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager
        gitpod.io/nodeService: ws-manager
      name: default-ws-manager-kube-rbac-proxy
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager
        gitpod.io/nodeService: ws-manager
      name: ws-manager
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager
        gitpod.io/nodeService: ws-manager
      name: ws-manager
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager
        gitpod.io/nodeService: ws-manager
        kind: service
      name: ws-manager
      namespace: default
    ---
    apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager
        gitpod.io/nodeService: ws-manager
      name: ws-manager-tls
      namespace: default
    ---
    apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager
        gitpod.io/nodeService: ws-manager
      name: ws-manager
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager
        gitpod.io/nodeService: ws-manager
      name: ws-manager-unpriviledged
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-proxy
        gitpod.io/nodeService: ws-proxy
      name: ws-proxy
      namespace: default
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-proxy
        gitpod.io/nodeService: ws-proxy
      name: ws-proxy
      namespace: default
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-proxy
        gitpod.io/nodeService: ws-proxy
      name: ws-proxy
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-proxy
        gitpod.io/nodeService: ws-proxy
      name: ws-proxy
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-proxy
        gitpod.io/nodeService: ws-proxy
      name: ws-proxy-api
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-proxy
        gitpod.io/nodeService: ws-proxy
      name: ws-proxy
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-proxy
        gitpod.io/nodeService: ws-proxy
      name: ws-proxy
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-proxy
        gitpod.io/nodeService: ws-proxy
        kind: service
      name: ws-proxy
      namespace: default
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      creationTimestamp: null
      labels:
        app: docker-registry
        chart: docker-registry-1.16.0
        heritage: Helm
        release: docker-registry
      name: registry-secret
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: docker-registry
        chart: docker-registry-1.16.0
        heritage: Helm
        release: docker-registry
      name: registry-config
      namespace: default
    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app: registry
        chart: docker-registry-1.16.0
        heritage: Helm
        release: docker-registry
      name: registry
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: docker-registry
        chart: docker-registry-1.16.0
        heritage: Helm
        release: docker-registry
      name: registry
      namespace: default
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      creationTimestamp: null
      labels:
        app: docker-registry
        chart: docker-registry-1.16.0
        heritage: Helm
        release: docker-registry
      name: registry
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: primary
        app.kubernetes.io/instance: MySQL
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-8.6.2
      name: mysql
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: primary
        app.kubernetes.io/instance: MySQL
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-8.6.2
      name: mysql-headless
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: primary
        app.kubernetes.io/instance: MySQL
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-8.6.2
      name: mysql
      namespace: default
    ---
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: primary
        app.kubernetes.io/instance: MySQL
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-8.6.2
      name: mysql
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: Minio
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-9.0.6
      name: minio
      namespace: default
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: Minio
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-9.0.6
      name: minio
      namespace: default
    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: Minio
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-9.0.6
      name: minio
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: Minio
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-9.0.6
      name: minio
      namespace: default
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: Minio
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-9.0.6
      name: minio
      namespace: default
    ---
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: RabbitMQ
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.24.6
      name: messagebus
      namespace: default
    ---
    apiVersion: policy/v1
    kind: PodDisruptionBudget
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: RabbitMQ
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.24.6
      name: messagebus
      namespace: default
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: RabbitMQ
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.24.6
      name: rabbitmq
      namespace: default
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: RabbitMQ
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.24.6
      name: messagebus
      namespace: default
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: RabbitMQ
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.24.6
      name: load-definition
      namespace: default
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: RabbitMQ
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.24.6
      name: rabbitmq
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: RabbitMQ
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.24.6
      name: messagebus-config
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: RabbitMQ
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.24.6
      name: messagebus-endpoint-reader
      namespace: default
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: RabbitMQ
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.24.6
      name: messagebus-endpoint-reader
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: RabbitMQ
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.24.6
      name: messagebus-headless
      namespace: default
    ---
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: RabbitMQ
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.24.6
      name: messagebus
      namespace: default
    ---
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: RabbitMQ
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.24.6
      name: messagebus
      namespace: default
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: gitpod-app
        gitpod.io/nodeService: gitpod-app
      name: gitpod-app
      namespace: default
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: gitpod-app
    gitpod.io/nodeService: gitpod-app
  name: gitpod-app
  namespace: default

---
# v1/ConfigMap workspace-templates
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager
    gitpod.io/nodeService: ws-manager
  name: workspace-templates
  namespace: default
---
# v1/ConfigMap proxy-config
apiVersion: v1
data:
  vhost.docker-registry: |-
    https://registry.localhost {
        import enable_log
        import remove_server_header
        import ssl_configuration

        basicauth bcrypt "Docker Registry" {
            Q.Remr8VcG78bIhc9fPn JDJhJDEwJE14VFFEZDdiNk5YS1hqRDMyVjdldHVyQVl3TGFNZDFISzhwUGgydWFzQy9scmxObW16S3ZH
        }

        reverse_proxy https://registry.default.svc.cluster.local {
            flush_interval -1
            transport http {
                tls_trusted_ca_certs /etc/caddy/registry-certs/ca.crt
            }
        }
    }
  vhost.empty: '# Placeholder to avoid errors loading files using a glob pattern'
  vhost.ide-proxy: |-
    https://ide.localhost {
        import enable_log_debug
        import remove_server_header
        import ssl_configuration

        reverse_proxy  {
            to ide-proxy.default.svc.cluster.local:80
        }
    }
  vhost.kedge: |-
    https://*.localhost {
        import enable_log
        import remove_server_header
        import ssl_configuration
        import debug_headers

        @kedge header_regexp host Host ^kedge-([a-z0-9]+).localhost
        handle @kedge {
            reverse_proxy kedge.default.svc.cluster.local:8080 {
                import upstream_headers
                import upstream_connection
            }
        }

        respond "Not found" 404
    }
  vhost.minio: |-
    https://minio.localhost {
        import enable_log
        import remove_server_header
        import ssl_configuration

        reverse_proxy minio.default.svc.cluster.local:9001 {
            flush_interval -1
        }
    }
  vhost.open-vsx: |-
    https://open-vsx.localhost {
        import enable_log_debug
        import remove_server_header
        import ssl_configuration

        reverse_proxy  {
            to openvsx-proxy.default.svc.cluster.local:8080
        }
    }
  vhost.payment-endpoint: |-
    https://payment.localhost {
        import enable_log
        import remove_server_header
        import ssl_configuration
        import debug_headers

        reverse_proxy payment-endpoint.default.svc.cluster.local:3002 {
            import upstream_headers
            import upstream_connection
        }

        handle_errors {
            respond "Internal Server Error" 500
        }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: proxy
    gitpod.io/nodeService: proxy
  name: proxy-config
  namespace: default
---
# v1/ConfigMap db-init-scripts
apiVersion: v1
data:
  init.sql: |
    -- 00-create-and-init-sessions-db.sql

    -- Copyright (c) 2020 Gitpod GmbH. All rights reserved.
    -- Licensed under the MIT License. See License-MIT.txt in the project root for license information.

    -- must be idempotent

    CREATE DATABASE IF NOT EXISTS `gitpod-sessions` CHARSET utf8mb4;

    USE `gitpod-sessions`;

    CREATE TABLE IF NOT EXISTS sessions (
      `session_id` varchar(128) COLLATE utf8mb4_bin NOT NULL,
      `expires` int(11) unsigned NOT NULL,
      `data` text COLLATE utf8mb4_bin,
      `_lastModified` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
      PRIMARY KEY (`session_id`)
      );

    -- Grant privileges
    GRANT ALL ON `gitpod-sessions`.* TO "gitpod"@"%";
    -- 01-recreate-gitpod-db.sql

    -- Copyright (c) 2020 Gitpod GmbH. All rights reserved.
    -- Licensed under the MIT License. See License-MIT.txt in the project root for license information.

    -- must be idempotent

    -- @gitpodDB contains name of the DB the script manipulates, and is replaced by the file reader
    SET
    @gitpodDB = IFNULL(@gitpodDB, '`gitpod`');

    SET
    @statementStr = CONCAT('DROP DATABASE IF EXISTS ', @gitpodDB);
    PREPARE statement FROM @statementStr;
    EXECUTE statement;

    SET
    @statementStr = CONCAT('CREATE DATABASE ', @gitpodDB, ' CHARSET utf8mb4');
    PREPARE statement FROM @statementStr;
    EXECUTE statement;
  tuneMysql.sql: SET GLOBAL innodb_lru_scan_depth=256;
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: db
    gitpod.io/nodeService: db
  name: db-init-scripts
  namespace: default
---
# v1/ConfigMap blobserve
apiVersion: v1
data:
  config.json: |-
    {
      "blobserve": {
        "port": 32224,
        "timeout": "5s",
        "repos": {
          "eu.gcr.io/gitpod-core-dev/build/ide/code": {
            "workdir": "/ide",
            "replacements": [
              {
                "path": "/ide/out/vs/workbench/workbench.web.api.js",
                "search": "vscode-webview.net",
                "replacement": "localhost"
              },
              {
                "path": "/ide/out/vs/workbench/workbench.web.main.js",
                "search": "vscode-webview.net",
                "replacement": "localhost"
              },
              {
                "path": "/ide/out/vs/workbench/services/extensions/worker/extensionHostWorker.js",
                "search": "vscode-webview.net",
                "replacement": "localhost"
              },
              {
                "path": "/ide/out/vs/workbench/workbench.web.api.js",
                "search": "open-vsx.org",
                "replacement": "open-vsx.localhost"
              },
              {
                "path": "/ide/out/vs/workbench/workbench.web.main.js",
                "search": "open-vsx.org",
                "replacement": "open-vsx.localhost"
              }
            ],
            "inlineStatic": [
              {
                "search": "${window.location.origin}",
                "replacement": "."
              },
              {
                "search": "value.startsWith(window.location.origin)",
                "replacement": "value.startsWith(window.location.origin) || value.startsWith('${ide}')"
              },
              {
                "search": "./out",
                "replacement": "${ide}/out"
              },
              {
                "search": "./node_modules",
                "replacement": "${ide}/node_modules"
              },
              {
                "search": "/_supervisor/frontend",
                "replacement": "${supervisor}"
              }
            ]
          },
          "eu.gcr.io/gitpod-core-dev/build/supervisor": {
            "workdir": "/.supervisor/frontend"
          }
        },
        "allowAnyRepo": false,
        "blobSpace": {
          "location": "/mnt/cache/blobserve",
          "maxSizeBytes": 1073741824
        }
      },
      "dockerAuth": "/mnt/pull-secret.json",
      "pprofAddr": ":6060",
      "prometheusAddr": "127.0.0.1:9500"
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: blobserve
    gitpod.io/nodeService: blobserve
  name: blobserve
  namespace: default
---
# v1/ConfigMap mysql
# Source: mysql/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  namespace: default
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-8.6.2
    app.kubernetes.io/instance: MySQL
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-

    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci

    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin

    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# v1/ConfigMap ws-manager
apiVersion: v1
data:
  config.json: |-
    {
      "manager": {
        "namespace": "default",
        "schedulerName": "",
        "seccompProfile": "localhost/workspace_default_release-2022.02.0.1.json",
        "container": {
          "workspace": {
            "image": "OVERWRITTEN-IN-REQUEST",
            "requests": {
              "cpu": "1",
              "memory": "2Gi",
              "ephemeral-storage": ""
            },
            "limits": {
              "cpu": "",
              "memory": "",
              "ephemeral-storage": ""
            }
          }
        },
        "timeouts": {
          "startup": "1h0m0s",
          "initialization": "30m0s",
          "regularWorkspace": "30m0s",
          "maxLifetime": "36h0m0s",
          "headlessWorkspace": "1h0m0s",
          "afterClose": "2m0s",
          "contentFinalization": "1h0m0s",
          "stopping": "1h0m0s",
          "interrupted": "5m0s"
        },
        "initProbe": {
          "timeout": "1s"
        },
        "podTemplate": {},
        "urlTemplate": "https://{{ .Prefix }}.ws.localhost",
        "portUrlTemplate": "https://{{ .WorkspacePort }}-{{ .Prefix }}.ws.localhost",
        "workspaceHostPath": "/var/gitpod/workspaces",
        "heartbeatInterval": "30s",
        "hostURL": "https://localhost",
        "reconnectionInterval": "30s",
        "wsdaemon": {
          "port": 8080,
          "tls": {
            "ca": "/ws-daemon-tls-certs/ca.crt",
            "crt": "/ws-daemon-tls-certs/tls.crt",
            "key": "/ws-daemon-tls-certs/tls.key"
          }
        },
        "registryFacadeHost": "reg.localhost:30000",
        "workspaceClusterHost": "ws.localhost"
      },
      "content": {
        "storage": {
          "stage": "",
          "kind": "minio",
          "gcloud": {
            "credentialsFile": "",
            "region": "",
            "projectId": "",
            "parallelUpload": 0,
            "maximumBackupCount": 0
          },
          "minio": {
            "endpoint": "minio.default.svc.cluster.local:9000",
            "accessKey": "ZhBJgB9gapllaHpHf8N8",
            "accessKeyFile": "",
            "secretKey": "unkXHtpCyqXgXQCYt_ry",
            "secretKeyFile": "",
            "region": "local",
            "parallelUpload": 6
          },
          "backupTrail": {
            "enabled": true,
            "maxLength": 3
          },
          "blobQuota": 5368709120
        }
      },
      "rpcServer": {
        "addr": ":8080",
        "tls": {
          "ca": "/certs/ca.crt",
          "crt": "/certs/tls.crt",
          "key": "/certs/tls.key"
        },
        "ratelimits": {}
      },
      "pprof": {
        "addr": "localhost:6060"
      },
      "prometheus": {
        "addr": "127.0.0.1:9500"
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager
    gitpod.io/nodeService: ws-manager
  name: ws-manager
  namespace: default
---
# v1/ConfigMap registry-facade
apiVersion: v1
data:
  config.json: |-
    {
      "registry": {
        "port": 32223,
        "prefix": "",
        "staticLayer": [
          {
            "ref": "eu.gcr.io/gitpod-core-dev/build/supervisor:commit-a8dd8e421ba0ddec468ae78dcf336f6c1aad74b5",
            "type": "image"
          },
          {
            "ref": "eu.gcr.io/gitpod-core-dev/build/workspacekit:commit-96327582b7a1a32b69c70cfc7e32539bd3f8e20e",
            "type": "image"
          },
          {
            "ref": "eu.gcr.io/gitpod-core-dev/build/docker-up:commit-6a3654aaced64b94fd123dd533306882033c9d71",
            "type": "image"
          }
        ],
        "remoteSpecProvider": {
          "addr": "dns:///ws-manager:8080",
          "tls": {
            "ca": "/ws-manager-client-tls-certs/ca.crt",
            "crt": "/ws-manager-client-tls-certs/tls.crt",
            "key": "/ws-manager-client-tls-certs/tls.key"
          }
        },
        "store": "/mnt/cache/registry",
        "requireAuth": false,
        "tls": {
          "ca": "",
          "crt": "/mnt/certificates/tls.crt",
          "key": "/mnt/certificates/tls.key"
        }
      },
      "dockerAuth": "/mnt/pull-secret.json",
      "pprofAddr": ":6060",
      "prometheusAddr": "127.0.0.1:9500"
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: registry-facade
    gitpod.io/nodeService: registry-facade
  name: registry-facade
  namespace: default
---
# v1/ConfigMap openvsx-proxy-config
apiVersion: v1
data:
  config.json: |-
    {
      "log_debug": false,
      "cache_duration_regular": "1m0s",
      "cache_duration_backup": "72h0m0s",
      "url_upstream": "https://open-vsx.org",
      "url_local": "https://open-vsx.localhost",
      "max_idle_conns": 1000,
      "max_idle_conns_per_host": 1000,
      "redis_addr": "",
      "prometheusAddr": ":9500"
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: openvsx-proxy
    gitpod.io/nodeService: openvsx-proxy
  name: openvsx-proxy-config
  namespace: default
---
# v1/ConfigMap server-config
apiVersion: v1
data:
  config.json: |-
    {
      "version": "release-2022.02.0.1",
      "hostUrl": "https://localhost",
      "installationShortname": "default",
      "stage": "production",
      "devBranch": "",
      "insecureNoDomain": false,
      "license": "",
      "licenseFile": "",
      "definitelyGpDisabled": false,
      "enableLocalApp": true,
      "builtinAuthProvidersConfigured": false,
      "disableDynamicAuthProviderLogin": false,
      "maxEnvvarPerUserCount": 4048,
      "maxConcurrentPrebuildsPerRef": 10,
      "makeNewUsersAdmin": false,
      "theiaPluginsBucketNameOverride": "",
      "defaultBaseImageRegistryWhitelist": [],
      "runDbDeleter": true,
      "contentServiceAddr": "content-service:8080",
      "imageBuilderAddr": "image-builder-mk3:8080",
      "vsxRegistryUrl": "https://open-vsx.localhost",
      "chargebeeProviderOptionsFile": "/chargebee/providerOptions",
      "enablePayment": false,
      "workspaceHeartbeat": {
        "intervalSeconds": 60,
        "timeoutSeconds": 300
      },
      "workspaceDefaults": {
        "workspaceImage": "docker.io/gitpod/workspace-full:latest",
        "previewFeatureFlags": [],
        "defaultFeatureFlags": []
      },
      "session": {
        "maxAgeMs": 259200000,
        "secret": "Important!Really-Change-This-Key!"
      },
      "githubApp": {
        "enabled": false,
        "appId": 0,
        "baseUrl": "",
        "webhookSecret": "",
        "authProviderId": "",
        "certPath": "",
        "marketplaceName": "",
        "logLevel": ""
      },
      "workspaceGarbageCollection": {
        "disabled": false,
        "startDate": 0,
        "chunkLimit": 1000,
        "minAgeDays": 14,
        "minAgePrebuildDays": 7,
        "contentRetentionPeriodDays": 21,
        "contentChunkLimit": 1000
      },
      "authProviderConfigFiles": [],
      "incrementalPrebuilds": {
        "repositoryPasslist": [],
        "commitHistory": 100
      },
      "blockNewUsers": {
        "enabled": false,
        "passlist": []
      },
      "oauthServer": {
        "enabled": true,
        "jwtSecret": "_gJu7A9vQH0B_o1AdojL"
      },
      "rateLimiter": {
        "groups": {
          "inWorkspaceUserAction": {
            "points": 10,
            "durationsSec": 2
          }
        },
        "functions": {
          "closePort": {
            "group": "inWorkspaceUserAction",
            "points": 0
          },
          "controlAdmission": {
            "group": "inWorkspaceUserAction",
            "points": 0
          },
          "openPort": {
            "group": "inWorkspaceUserAction",
            "points": 0
          },
          "shareSnapshot": {
            "group": "inWorkspaceUserAction",
            "points": 0
          }
        }
      },
      "codeSync": {
        "revLimit": 0,
        "contentLimit": 0,
        "resources": null
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: server
    gitpod.io/nodeService: server
  name: server-config
  namespace: default
---
# v1/ConfigMap registry-config
# Source: docker-registry/charts/docker-registry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-config
  namespace: default
  labels:
    app: docker-registry
    chart: docker-registry-1.16.0
    heritage: Helm
    release: docker-registry
data:
  config.yml: |-
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
    http:
      addr: :5000
      debug:
        addr: :5001
        prometheus:
          enabled: false
          path: /metrics
      headers:
        X-Content-Type-Options:
          - nosniff
    log:
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: inmemory
    version: 0.1
---
# v1/ConfigMap server-ide-config
apiVersion: v1
data:
  config.json: |-
    {
      "supervisorImage": "eu.gcr.io/gitpod-core-dev/build/supervisor:commit-a8dd8e421ba0ddec468ae78dcf336f6c1aad74b5",
      "ideOptions": {
        "options": {
          "code": {
            "orderKey": "00",
            "title": "VS Code",
            "type": "browser",
            "logo": "https://ide.localhost/image/ide-logo/vscode.svg",
            "image": "eu.gcr.io/gitpod-core-dev/build/ide/code:commit-890de80174c7dd9d073d63ef2b1f9eac68f063c1"
          },
          "code-desktop": {
            "orderKey": "02",
            "title": "VS Code",
            "type": "desktop",
            "logo": "https://ide.localhost/image/ide-logo/vscode.svg",
            "image": "eu.gcr.io/gitpod-core-dev/build/ide/code-desktop:commit-f0c0c87899d21b0502c36036cdea091015b90c7a"
          },
          "code-desktop-insiders": {
            "orderKey": "03",
            "title": "VS Code",
            "type": "desktop",
            "logo": "https://ide.localhost/image/ide-logo/vscodeInsiders.svg",
            "tooltip": "Visual Studio Code Insiders for early adopters.",
            "label": "Insiders",
            "image": "eu.gcr.io/gitpod-core-dev/build/ide/code-desktop-insiders:commit-f0c0c87899d21b0502c36036cdea091015b90c7a"
          },
          "code-latest": {
            "orderKey": "01",
            "title": "VS Code",
            "type": "browser",
            "logo": "https://ide.localhost/image/ide-logo/vscodeInsiders.svg",
            "tooltip": "Early access version, still subject to testing.",
            "label": "Insiders",
            "image": "eu.gcr.io/gitpod-core-dev/build/ide/code:commit-5b370bfaaa841e22ccc25f8db438dab943f70ec6",
            "resolveImageDigest": true
          },
          "goland": {
            "orderKey": "05",
            "title": "GoLand",
            "type": "desktop",
            "logo": "https://ide.localhost/image/ide-logo/golandLogo.svg",
            "image": "eu.gcr.io/gitpod-core-dev/build/ide/goland:commit-b5b2360944a977743406c4ccea8f1a44441471d4",
            "latestImage": "eu.gcr.io/gitpod-core-dev/build/ide/goland:latest"
          },
          "intellij": {
            "orderKey": "04",
            "title": "IntelliJ IDEA",
            "type": "desktop",
            "logo": "https://ide.localhost/image/ide-logo/intellijIdeaLogo.svg",
            "image": "eu.gcr.io/gitpod-core-dev/build/ide/intellij:commit-b5b2360944a977743406c4ccea8f1a44441471d4",
            "latestImage": "eu.gcr.io/gitpod-core-dev/build/ide/intellij:latest"
          },
          "phpstorm": {
            "orderKey": "07",
            "title": "PhpStorm",
            "type": "desktop",
            "logo": "https://ide.localhost/image/ide-logo/phpstormLogo.svg",
            "image": "eu.gcr.io/gitpod-core-dev/build/ide/phpstorm:commit-b5b2360944a977743406c4ccea8f1a44441471d4",
            "latestImage": "eu.gcr.io/gitpod-core-dev/build/ide/phpstorm:latest"
          },
          "pycharm": {
            "orderKey": "06",
            "title": "PyCharm",
            "type": "desktop",
            "logo": "https://ide.localhost/image/ide-logo/pycharmLogo.svg",
            "image": "eu.gcr.io/gitpod-core-dev/build/ide/pycharm:commit-b5b2360944a977743406c4ccea8f1a44441471d4",
            "latestImage": "eu.gcr.io/gitpod-core-dev/build/ide/pycharm:latest"
          }
        },
        "defaultIde": "code",
        "defaultDesktopIde": "code-desktop",
        "clients": {
          "jetbrains-gateway": {
            "defaultDesktopIDE": "intellij",
            "desktopIDEs": [
              "intellij",
              "goland",
              "pycharm",
              "phpstorm"
            ],
            "installationSteps": [
              "If you don't see an open dialog in your browser, make sure you have the \u003ca target='_blank' class='gp-link' href='https://www.gitpod.io/docs/ides-and-editors/jetbrains-gateway#getting-started-jetbrains-gateway'\u003eJetBrains Gateway with Gitpod Plugin\u003c/a\u003e installed on your machine, and then click \u003cb\u003e${OPEN_LINK_LABEL}\u003c/b\u003e below."
            ]
          },
          "vscode": {
            "defaultDesktopIDE": "code-desktop",
            "desktopIDEs": [
              "code-desktop"
            ],
            "installationSteps": [
              "If you don't see an open dialog in your browser, make sure you have \u003ca target='_blank' class='gp-link' href='https://code.visualstudio.com/download'\u003eVS Code\u003c/a\u003e installed on your machine, and then click \u003cb\u003e${OPEN_LINK_LABEL}\u003c/b\u003e below."
            ]
          },
          "vscode-insiders": {
            "defaultDesktopIDE": "code-desktop-insiders",
            "desktopIDEs": [
              "code-desktop-insiders"
            ],
            "installationSteps": [
              "If you don't see an open dialog in your browser, make sure you have \u003ca target='_blank' class='gp-link' href='https://code.visualstudio.com/insiders'\u003eVS Code Insiders\u003c/a\u003e installed on your machine, and then click \u003cb\u003e${OPEN_LINK_LABEL}\u003c/b\u003e below."
            ]
          }
        }
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: server
    gitpod.io/nodeService: server
  name: server-ide-config
  namespace: default
---
# v1/ConfigMap image-builder-mk3-config
apiVersion: v1
data:
  image-builder.json: |-
    {
      "orchestrator": {
        "wsman": {
          "address": "ws-manager:8080",
          "tls": {
            "ca": "/wsman-certs/ca.crt",
            "crt": "/wsman-certs/tls.crt",
            "key": "/wsman-certs/tls.key"
          }
        },
        "pullSecret": "builtin-registry-auth",
        "pullSecretFile": "/config/pull-secret.json",
        "baseImageRepository": "registry.localhost/base-images",
        "workspaceImageRepository": "registry.localhost/workspace-images",
        "builderImage": "eu.gcr.io/gitpod-core-dev/build/image-builder-mk3/bob:fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9"
      },
      "refCache": {
        "interval": "6h0m0s",
        "refs": [
          "docker.io/gitpod/workspace-full:latest"
        ]
      },
      "service": {
        "address": ":8080",
        "tls": {
          "ca": "",
          "crt": "",
          "key": ""
        }
      },
      "prometheus": {
        "address": "127.0.0.1:9500",
        "tls": {
          "ca": "",
          "crt": "",
          "key": ""
        }
      },
      "pprof": {
        "address": ":6060"
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: image-builder-mk3
    gitpod.io/nodeService: image-builder-mk3
  name: image-builder-mk3-config
  namespace: default
---
# v1/ConfigMap messagebus-config
# Source: rabbitmq/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: messagebus-config
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.24.6
    app.kubernetes.io/instance: RabbitMQ
    app.kubernetes.io/managed-by: Helm
data:
  rabbitmq.conf: |-

    ## Clustering
    ##
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    load_definitions = /app/load_definition.json
    # Increase statistics emission interval https://www.rabbitmq.com/management.html#statistics-interval
    collect_statistics_interval = 15000

    ssl_options.verify = verify_peer
    listeners.ssl.default = 5671
    ssl_options.fail_if_no_peer_cert = true
    ssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
    ssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem
    ssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem
    ## Prometheus metrics
    ##
    prometheus.tcp.port = 9419
---
# v1/ConfigMap ws-daemon
apiVersion: v1
data:
  config.json: |-
    {
      "daemon": {
        "runtime": {
          "containerRuntime": {
            "mounts": {
              "proc": "/mnt/mounts"
            },
            "nodeToContainerMapping": {
              "/run/k3s/containerd/io.containerd.runtime.v2.task/k8s.io": "/mnt/node0"
            },
            "runtime": "containerd",
            "containerd": {
              "socket": "/mnt/containerd.sock"
            }
          },
          "kubeconfig": "",
          "namespace": "default"
        },
        "readiness": {
          "enabled": true,
          "addr": ":9999",
          "path": ""
        },
        "content": {
          "workingArea": "/mnt/workingarea",
          "workingAreaNode": "/var/gitpod/workspaces",
          "tempDir": "/tmp",
          "workspaceSizeLimit": "0",
          "storage": {
            "stage": "",
            "kind": "minio",
            "gcloud": {
              "credentialsFile": "",
              "region": "",
              "projectId": "",
              "parallelUpload": 0,
              "maximumBackupCount": 0
            },
            "minio": {
              "endpoint": "minio.default.svc.cluster.local:9000",
              "accessKey": "ZhBJgB9gapllaHpHf8N8",
              "accessKeyFile": "",
              "secretKey": "unkXHtpCyqXgXQCYt_ry",
              "secretKeyFile": "",
              "region": "local",
              "parallelUpload": 6
            },
            "backupTrail": {
              "enabled": true,
              "maxLength": 3
            },
            "blobQuota": 5368709120
          },
          "backup": {
            "timeout": "5m0s",
            "attempts": 3,
            "period": "0s"
          },
          "userNamespaces": {
            "fsShift": "FUSE"
          },
          "initializer": {
            "command": "/app/content-initializer",
            "args": null
          }
        },
        "uidmapper": {
          "procLocation": "/proc",
          "rootUIDRange": {
            "start": 33333,
            "size": 1
          },
          "userUIDRange": [
            {
              "start": 100000,
              "size": 70000
            }
          ]
        },
        "cpulimit": {
          "enabled": false,
          "totalBandwidth": "0",
          "limit": "0",
          "burstLimit": "0",
          "controlPeriod": "15s",
          "cgroupBasePath": "/mnt/node-cgroups"
        },
        "hosts": {
          "enabled": true,
          "nodeHostsFile": "/mnt/hosts",
          "fixedHosts": {
            "registryFacade": [
              {
                "addr": "127.0.0.1",
                "name": "reg.localhost"
              }
            ]
          }
        },
        "disk": {
          "enabled": true,
          "interval": "5m0s",
          "locations": [
            {
              "path": "/mnt/workingarea",
              "minBytesAvail": 21474836480
            }
          ]
        }
      },
      "service": {
        "address": ":8080",
        "tls": {
          "ca": "/certs/ca.crt",
          "crt": "/certs/tls.crt",
          "key": "/certs/tls.key"
        }
      },
      "prometheus": {
        "address": "localhost:9500"
      },
      "pprof": {
        "address": "localhost:6060"
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-daemon
    gitpod.io/nodeService: ws-daemon
  name: ws-daemon
  namespace: default
---
# v1/ConfigMap agent-smith
apiVersion: v1
data:
  config.json: |-
    {
      "gitpodAPI": {
        "hostURL": "",
        "apiToken": ""
      },
      "blocklists": {
        "very": {
          "signatures": [
            {
              "name": "testtarget",
              "domain": "process",
              "kind": "elf",
              "pattern": "WVdkbGJuUlRiV2wwYUZSbGMzUlVZWEpuWlhRPQ==",
              "regexp": false,
              "slice": {}
            }
          ]
        }
      },
      "egressTraffic": {
        "dt": "2m0s",
        "excessive": {
          "baseBudget": "300Mi",
          "perDtThreshold": "100Mi"
        },
        "veryExcessive": {
          "baseBudget": "2Gi",
          "perDtThreshold": "250Mi"
        }
      },
      "enforcement": {},
      "kubernetes": {
        "enabled": true
      },
      "pprofAddr": "localhost:6060",
      "prometheusAddr": "localhost:9500",
      "hostURL": "https://localhost"
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: agent-smith
    gitpod.io/nodeService: agent-smith
  name: agent-smith
  namespace: default
---
# v1/ConfigMap ws-proxy
apiVersion: v1
data:
  config.json: |-
    {
      "ingress": {
        "httpAddress": ":8080",
        "httpsAddress": ":9090",
        "header": "x-wsproxy-host"
      },
      "proxy": {
        "https": {
          "key": "/mnt/certificates/tls.key",
          "crt": "/mnt/certificates/tls.crt"
        },
        "transportConfig": {
          "connectTimeout": "10s",
          "idleConnTimeout": "1m0s",
          "maxIdleConns": 0,
          "maxIdleConnsPerHost": 100
        },
        "blobServer": {
          "scheme": "http",
          "host": "blobserve.default.svc.cluster.local:4000"
        },
        "gitpodInstallation": {
          "scheme": "https",
          "hostName": "localhost",
          "workspaceHostSuffix": ".ws.localhost",
          "workspaceHostSuffixRegex": "\\.ws[^\\.]*\\.localhost"
        },
        "workspacePodConfig": {
          "theiaPort": 23000,
          "supervisorPort": 22999,
          "supervisorImage": "eu.gcr.io/gitpod-core-dev/build/supervisor:commit-a8dd8e421ba0ddec468ae78dcf336f6c1aad74b5"
        },
        "builtinPages": {
          "location": "/app/public"
        }
      },
      "pprofAddr": ":60060",
      "prometheusAddr": ":60095",
      "readinessProbeAddr": ":60088",
      "namespace": "default",
      "wsManager": {
        "addr": "ws-manager:8080",
        "tls": {
          "ca": "/ws-manager-client-tls-certs/ca.crt",
          "crt": "/ws-manager-client-tls-certs/tls.crt",
          "key": "/ws-manager-client-tls-certs/tls.key"
        }
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-proxy
    gitpod.io/nodeService: ws-proxy
  name: ws-proxy
  namespace: default
---
# v1/ConfigMap gitpod
apiVersion: v1
data:
  config.json: |-
    {
      "kind": "Full",
      "domain": "localhost",
      "metadata": {
        "region": "local"
      },
      "repository": "eu.gcr.io/gitpod-core-dev/build",
      "observability": {
        "logLevel": "info"
      },
      "database": {
        "inCluster": true
      },
      "objectStorage": {
        "inCluster": true
      },
      "containerRegistry": {
        "inCluster": true
      },
      "certificate": {
        "kind": "secret",
        "name": "https-certificates"
      },
      "workspace": {
        "runtime": {
          "fsShiftMethod": "fuse",
          "containerdRuntimeDir": "/run/k3s/containerd/io.containerd.runtime.v2.task/k8s.io",
          "containerdSocket": "/run/k3s/containerd/containerd.sock"
        },
        "resources": {
          "requests": {
            "cpu": "1",
            "memory": "2Gi"
          }
        }
      },
      "openVSX": {
        "url": "https://open-vsx.org"
      },
      "authProviders": [],
      "blockNewUsers": {
        "enabled": false,
        "passlist": []
      },
      "disableDefinitelyGp": false
    }
  versions.json: |-
    {
      "versions": {
        "version": "release-2022.02.0.1",
        "components": {
          "agentSmith": {
            "version": "commit-8064ece916010858ea846f54f5a4b2c882ca4d42"
          },
          "blobserve": {
            "version": "commit-fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9"
          },
          "caUpdater": {
            "version": "commit-f0c0c87899d21b0502c36036cdea091015b90c7a"
          },
          "contentService": {
            "version": "commit-04d1fb4efcb299e8eaf92ac54a949a4cf6fff930"
          },
          "dashboard": {
            "version": "commit-9d895536db0c62cf42f175843cb7122e8dddcd43"
          },
          "dbMigrations": {
            "version": "commit-0d0df6ce5870c0fc136687844f4d0f153f2f4101"
          },
          "dbSync": {
            "version": "commit-0d0df6ce5870c0fc136687844f4d0f153f2f4101"
          },
          "ideProxy": {
            "version": "commit-4593c9e3ced634759e9e7a6aebcdb76be6b6481a"
          },
          "imageBuilder": {
            "version": ""
          },
          "imageBuilderMk3": {
            "version": "commit-7e0d3291c519f0fc07079236bd1393f06788c35e",
            "builderImage": {
              "version": "fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9"
            }
          },
          "installationTelemetry": {
            "version": "commit-5967f965d3c34f9e9720f19fd20a2307d7b769ad"
          },
          "integrationTests": {
            "version": ""
          },
          "kedge": {
            "version": "commit-fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9"
          },
          "openVSXProxy": {
            "version": "commit-fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9"
          },
          "paymentEndpoint": {
            "version": "commit-0d0df6ce5870c0fc136687844f4d0f153f2f4101"
          },
          "proxy": {
            "version": "commit-4593c9e3ced634759e9e7a6aebcdb76be6b6481a"
          },
          "registryFacade": {
            "version": "commit-fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9"
          },
          "server": {
            "version": "commit-319e34f8b189bdc9424768c41aca213f9d06eafe"
          },
          "serviceWaiter": {
            "version": "commit-fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9"
          },
          "workspace": {
            "codeImage": {
              "version": "commit-5b370bfaaa841e22ccc25f8db438dab943f70ec6"
            },
            "dockerUp": {
              "version": "commit-6a3654aaced64b94fd123dd533306882033c9d71"
            },
            "supervisor": {
              "version": "commit-a8dd8e421ba0ddec468ae78dcf336f6c1aad74b5"
            },
            "workspacekit": {
              "version": "commit-96327582b7a1a32b69c70cfc7e32539bd3f8e20e"
            },
            "desktopIdeImages": {
              "codeDesktop": {
                "version": "commit-f0c0c87899d21b0502c36036cdea091015b90c7a"
              },
              "codeDesktopInsiders": {
                "version": "commit-f0c0c87899d21b0502c36036cdea091015b90c7a"
              },
              "intellij": {
                "version": "commit-b5b2360944a977743406c4ccea8f1a44441471d4"
              },
              "goland": {
                "version": "commit-b5b2360944a977743406c4ccea8f1a44441471d4"
              },
              "pycharm": {
                "version": "commit-b5b2360944a977743406c4ccea8f1a44441471d4"
              },
              "phpstorm": {
                "version": "commit-b5b2360944a977743406c4ccea8f1a44441471d4"
              }
            }
          },
          "wsDaemon": {
            "version": "commit-764b0cf3b9e14607392b9e088c984a914c9ff24e",
            "userNamespaces": {
              "seccompProfileInstaller": {
                "version": "commit-f0c0c87899d21b0502c36036cdea091015b90c7a"
              },
              "shiftfsModuleLoader": {
                "version": "commit-f0c0c87899d21b0502c36036cdea091015b90c7a"
              }
            }
          },
          "wsManager": {
            "version": "commit-363b2206969c3c7ad05994b55b197a1ef334c5c3"
          },
          "wsManagerBridge": {
            "version": "commit-0d0df6ce5870c0fc136687844f4d0f153f2f4101"
          },
          "wsProxy": {
            "version": "commit-bd231e14a69408cef500bf8925e237105babc5bf"
          }
        }
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: gitpod
    gitpod.io/nodeService: gitpod
  name: gitpod
  namespace: default
---
# v1/ConfigMap ws-manager-bridge-config
apiVersion: v1
data:
  ws-manager-bridge.json: |-
    {
      "installation": "",
      "staticBridges": [
        {
          "name": "default",
          "url": "dns:///ws-manager:8080",
          "tls": {
            "ca": "/ws-manager-client-tls-certs/ca.crt",
            "crt": "/ws-manager-client-tls-certs/tls.crt",
            "key": "/ws-manager-client-tls-certs/tls.key"
          },
          "state": "available",
          "maxScore": 100,
          "score": 50,
          "govern": true,
          "admissionConstraints": null
        }
      ],
      "clusterService": {
        "port": 8080,
        "host": "localhost"
      },
      "wsClusterDBReconcileIntervalSeconds": 60,
      "controllerIntervalSeconds": 60,
      "controllerMaxDisconnectSeconds": 150,
      "maxTimeToRunningPhaseSeconds": 0,
      "emulatePreparingIntervalSeconds": 10,
      "timeouts": {
        "metaInstanceCheckIntervalSeconds": 60,
        "preparingPhaseSeconds": 3600,
        "stoppingPhaseSeconds": 3600,
        "unknownPhaseSeconds": 600
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager-bridge
    gitpod.io/nodeService: ws-manager-bridge
  name: ws-manager-bridge-config
  namespace: default
---
# v1/PersistentVolumeClaim registry
# Source: docker-registry/charts/docker-registry/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: registry
  namespace: default
  labels:
    app: registry
    chart: "docker-registry-1.16.0"
    release: "docker-registry"
    heritage: "Helm"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# v1/PersistentVolumeClaim minio
# Source: minio/charts/minio/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-9.0.6
    app.kubernetes.io/instance: Minio
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# rbac.authorization.k8s.io/v1/ClusterRole default-ns-ws-daemon
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-daemon
    gitpod.io/nodeService: ws-daemon
  name: default-ns-ws-daemon
rules:
  - apiGroups:
      - policy
    resourceNames:
      - default-ns-privileged-unconfined
    resources:
      - podsecuritypolicies
    verbs:
      - use
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
      - list
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
      - update
      - patch
---
# rbac.authorization.k8s.io/v1/ClusterRole default-ns-image-builder-mk3
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: image-builder-mk3
    gitpod.io/nodeService: image-builder-mk3
  name: default-ns-image-builder-mk3
rules:
  - apiGroups:
      - policy
    resourceNames:
      - default-ns-privileged-unconfined
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
# rbac.authorization.k8s.io/v1/ClusterRole default-kube-rbac-proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: default-kube-rbac-proxy
rules:
  - apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
    verbs:
      - create
  - apiGroups:
      - authorization.k8s.io
    resources:
      - subjectaccessreviews
    verbs:
      - create
---
# rbac.authorization.k8s.io/v1/ClusterRole default-ns-psp:privileged
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: default-ns-psp:privileged
rules:
  - apiGroups:
      - policy
    resourceNames:
      - default-ns-privileged
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
# rbac.authorization.k8s.io/v1/ClusterRole default-ns-psp:restricted-root-user
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: default-ns-psp:restricted-root-user
rules:
  - apiGroups:
      - policy
    resourceNames:
      - default-ns-restricted-root-user
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
# rbac.authorization.k8s.io/v1/ClusterRole default-ns-psp:unprivileged
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: default-ns-psp:unprivileged
rules:
  - apiGroups:
      - policy
    resourceNames:
      - default-ns-unprivileged
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
# rbac.authorization.k8s.io/v1/ClusterRole default-ns-registry-facade
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: registry-facade
    gitpod.io/nodeService: registry-facade
  name: default-ns-registry-facade
rules:
  - apiGroups:
      - policy
    resourceNames:
      - default-ns-registry-facade
    resources:
      - podsecuritypolicies
    verbs:
      - use
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
      - patch
---
# rbac.authorization.k8s.io/v1/ClusterRoleBinding default-agent-smith-rb-kube-rbac-proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: agent-smith
    gitpod.io/nodeService: agent-smith
  name: default-agent-smith-rb-kube-rbac-proxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-kube-rbac-proxy
subjects:
  - kind: ServiceAccount
    name: agent-smith
    namespace: default
---
# rbac.authorization.k8s.io/v1/ClusterRoleBinding default-ws-daemon-rb-kube-rbac-proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-daemon
    gitpod.io/nodeService: ws-daemon
  name: default-ws-daemon-rb-kube-rbac-proxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-kube-rbac-proxy
subjects:
  - kind: ServiceAccount
    name: ws-daemon
    namespace: default
---
# rbac.authorization.k8s.io/v1/ClusterRoleBinding default-ws-daemon-rb
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-daemon
    gitpod.io/nodeService: ws-daemon
  name: default-ws-daemon-rb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-ws-daemon
subjects:
  - kind: ServiceAccount
    name: ws-daemon
    namespace: default
---
# rbac.authorization.k8s.io/v1/ClusterRoleBinding default-proxy-kube-rbac-proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: proxy
    gitpod.io/nodeService: proxy
  name: default-proxy-kube-rbac-proxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-kube-rbac-proxy
subjects:
  - kind: ServiceAccount
    name: proxy
    namespace: default
---
# rbac.authorization.k8s.io/v1/ClusterRoleBinding default-registry-facade-kube-rbac-proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: registry-facade
    gitpod.io/nodeService: registry-facade
  name: default-registry-facade-kube-rbac-proxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-kube-rbac-proxy
subjects:
  - kind: ServiceAccount
    name: registry-facade
    namespace: default
---
# rbac.authorization.k8s.io/v1/ClusterRoleBinding default-registry-facade-rb
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: registry-facade
    gitpod.io/nodeService: registry-facade
  name: default-registry-facade-rb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-registry-facade
subjects:
  - kind: ServiceAccount
    name: registry-facade
    namespace: default
---
# rbac.authorization.k8s.io/v1/ClusterRoleBinding default-openvsx-proxy-kube-rbac-proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: openvsx-proxy
    gitpod.io/nodeService: openvsx-proxy
  name: default-openvsx-proxy-kube-rbac-proxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-kube-rbac-proxy
subjects:
  - kind: ServiceAccount
    name: openvsx-proxy
    namespace: default
---
# rbac.authorization.k8s.io/v1/ClusterRoleBinding default-image-builder-mk3-proxy-kube-rbac-proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: image-builder-mk3
    gitpod.io/nodeService: image-builder-mk3
  name: default-image-builder-mk3-proxy-kube-rbac-proxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-kube-rbac-proxy
subjects:
  - kind: ServiceAccount
    name: image-builder-mk3
    namespace: default
---
# rbac.authorization.k8s.io/v1/ClusterRoleBinding default-server-rb-kube-rbac-proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: server
    gitpod.io/nodeService: server
  name: default-server-rb-kube-rbac-proxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-kube-rbac-proxy
subjects:
  - kind: ServiceAccount
    name: server
    namespace: default
---
# rbac.authorization.k8s.io/v1/ClusterRoleBinding default-ws-manager-kube-rbac-proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager
    gitpod.io/nodeService: ws-manager
  name: default-ws-manager-kube-rbac-proxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-kube-rbac-proxy
subjects:
  - kind: ServiceAccount
    name: ws-manager
    namespace: default
---
# rbac.authorization.k8s.io/v1/ClusterRoleBinding default-blobserve-kube-rbac-proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: blobserve
    gitpod.io/nodeService: blobserve
  name: default-blobserve-kube-rbac-proxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-kube-rbac-proxy
subjects:
  - kind: ServiceAccount
    name: blobserve
    namespace: default
---
# rbac.authorization.k8s.io/v1/Role workspace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: workspace
    gitpod.io/nodeService: workspace
  name: workspace
  namespace: default
rules:
  - apiGroups:
      - policy
    resourceNames:
      - default-ns-workspace
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
# rbac.authorization.k8s.io/v1/Role ws-manager
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager
    gitpod.io/nodeService: ws-manager
  name: ws-manager
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - events
      - services
      - endpoints
      - configmaps
    verbs:
      - get
      - list
      - create
      - update
      - patch
      - watch
      - delete
      - deletecollection
---
# rbac.authorization.k8s.io/v1/Role messagebus-endpoint-reader
# Source: rabbitmq/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: messagebus-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.24.6
    app.kubernetes.io/instance: RabbitMQ
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# rbac.authorization.k8s.io/v1/Role server
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: server
    gitpod.io/nodeService: server
  name: server
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - create
      - update
      - patch
      - watch
      - delete
      - deletecollection
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
    verbs:
      - get
      - list
      - create
      - update
      - patch
      - watch
      - delete
      - deletecollection
---
# rbac.authorization.k8s.io/v1/Role ws-proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-proxy
    gitpod.io/nodeService: ws-proxy
  name: ws-proxy
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
---
# rbac.authorization.k8s.io/v1/Role agent-smith
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: agent-smith
    gitpod.io/nodeService: agent-smith
  name: agent-smith
  namespace: default
rules:
  - apiGroups:
      - policy
    resourceNames:
      - default-ns-privileged-unconfined
    resources:
      - podsecuritypolicies
    verbs:
      - use
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - update
---
# rbac.authorization.k8s.io/v1/RoleBinding default-ns-nobody
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  name: default-ns-nobody
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:unprivileged
subjects:
  - kind: ServiceAccount
    name: nobody
    namespace: default
---
# rbac.authorization.k8s.io/v1/RoleBinding openvsx-proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: openvsx-proxy
    gitpod.io/nodeService: openvsx-proxy
  name: openvsx-proxy
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:restricted-root-user
subjects:
  - kind: ServiceAccount
    name: openvsx-proxy
---
# rbac.authorization.k8s.io/v1/RoleBinding docker-registry
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: docker-registry
    gitpod.io/nodeService: docker-registry
  name: docker-registry
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:restricted-root-user
subjects:
  - kind: ServiceAccount
    name: docker-registry
---
# rbac.authorization.k8s.io/v1/RoleBinding ide-proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ide-proxy
    gitpod.io/nodeService: ide-proxy
  name: ide-proxy
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:restricted-root-user
subjects:
  - kind: ServiceAccount
    name: ide-proxy
---
# rbac.authorization.k8s.io/v1/RoleBinding migrations
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: migrations
    gitpod.io/nodeService: migrations
  name: migrations
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:restricted-root-user
subjects:
  - kind: ServiceAccount
    name: migrations
---
# rbac.authorization.k8s.io/v1/RoleBinding workspace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: workspace
    gitpod.io/nodeService: workspace
  name: workspace
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: workspace
subjects:
  - kind: ServiceAccount
    name: workspace
---
# rbac.authorization.k8s.io/v1/RoleBinding image-builder-mk3
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: image-builder-mk3
    gitpod.io/nodeService: image-builder-mk3
  name: image-builder-mk3
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-image-builder-mk3
subjects:
  - kind: ServiceAccount
    name: image-builder-mk3
---
# rbac.authorization.k8s.io/v1/RoleBinding agent-smith
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: agent-smith
    gitpod.io/nodeService: agent-smith
  name: agent-smith
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: agent-smith
subjects:
  - kind: ServiceAccount
    name: agent-smith
---
# rbac.authorization.k8s.io/v1/RoleBinding db
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: db
    gitpod.io/nodeService: db
  name: db
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:restricted-root-user
subjects:
  - kind: ServiceAccount
    name: db
---
# rbac.authorization.k8s.io/v1/RoleBinding rabbitmq
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: rabbitmq
    gitpod.io/nodeService: rabbitmq
  name: rabbitmq
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:restricted-root-user
subjects:
  - kind: ServiceAccount
    name: rabbitmq
---
# rbac.authorization.k8s.io/v1/RoleBinding server-unprivileged
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: server
    gitpod.io/nodeService: server
  name: server-unprivileged
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:unprivileged
subjects:
  - kind: ServiceAccount
    name: server
---
# rbac.authorization.k8s.io/v1/RoleBinding content-service
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: content-service
    gitpod.io/nodeService: content-service
  name: content-service
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:restricted-root-user
subjects:
  - kind: ServiceAccount
    name: content-service
---
# rbac.authorization.k8s.io/v1/RoleBinding minio
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: minio
    gitpod.io/nodeService: minio
  name: minio
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:unprivileged
subjects:
  - kind: ServiceAccount
    name: minio
---
# rbac.authorization.k8s.io/v1/RoleBinding ws-proxy-api
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-proxy
    gitpod.io/nodeService: ws-proxy
  name: ws-proxy-api
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ws-proxy
subjects:
  - kind: ServiceAccount
    name: ws-proxy
---
# rbac.authorization.k8s.io/v1/RoleBinding ws-proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-proxy
    gitpod.io/nodeService: ws-proxy
  name: ws-proxy
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:unprivileged
subjects:
  - kind: ServiceAccount
    name: ws-proxy
---
# rbac.authorization.k8s.io/v1/RoleBinding server
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: server
    gitpod.io/nodeService: server
  name: server
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: server
subjects:
  - kind: ServiceAccount
    name: server
---
# rbac.authorization.k8s.io/v1/RoleBinding gitpod
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: gitpod
    gitpod.io/nodeService: gitpod
  name: gitpod
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:restricted-root-user
subjects:
  - kind: ServiceAccount
    name: gitpod
---
# rbac.authorization.k8s.io/v1/RoleBinding dashboard
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: dashboard
    gitpod.io/nodeService: dashboard
  name: dashboard
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:restricted-root-user
subjects:
  - kind: ServiceAccount
    name: dashboard
---
# rbac.authorization.k8s.io/v1/RoleBinding blobserve
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: blobserve
    gitpod.io/nodeService: blobserve
  name: blobserve
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:restricted-root-user
subjects:
  - kind: ServiceAccount
    name: blobserve
---
# rbac.authorization.k8s.io/v1/RoleBinding ws-manager-bridge
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager-bridge
    gitpod.io/nodeService: ws-manager-bridge
  name: ws-manager-bridge
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:unprivileged
subjects:
  - kind: ServiceAccount
    name: ws-manager-bridge
---
# rbac.authorization.k8s.io/v1/RoleBinding messagebus-endpoint-reader
# Source: rabbitmq/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: messagebus-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.24.6
    app.kubernetes.io/instance: RabbitMQ
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: messagebus-endpoint-reader
---
# rbac.authorization.k8s.io/v1/RoleBinding ws-manager-unpriviledged
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager
    gitpod.io/nodeService: ws-manager
  name: ws-manager-unpriviledged
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:unprivileged
subjects:
  - kind: ServiceAccount
    name: ws-manager
---
# rbac.authorization.k8s.io/v1/RoleBinding ws-manager
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager
    gitpod.io/nodeService: ws-manager
  name: ws-manager
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ws-manager
subjects:
  - kind: ServiceAccount
    name: ws-manager
---
# rbac.authorization.k8s.io/v1/RoleBinding proxy
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: proxy
    gitpod.io/nodeService: proxy
  name: proxy
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ns-psp:restricted-root-user
subjects:
  - kind: ServiceAccount
    name: proxy
---
# v1/Service mysql-headless
# Source: mysql/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
  namespace: default
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-8.6.2
    app.kubernetes.io/instance: MySQL
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: MySQL
    app.kubernetes.io/component: primary
---
# v1/Service server
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: server
    gitpod.io/nodeService: server
    kind: service
  name: server
  namespace: default
spec:
  ports:
    - name: http
      port: 3000
      protocol: TCP
      targetPort: 3000
    - name: metrics
      port: 9500
      protocol: TCP
      targetPort: 9500
    - name: installation-admin
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: gitpod
    component: server
    gitpod.io/nodeService: server
  type: ClusterIP
status:
  loadBalancer: {}
---
# v1/Service messagebus
# Source: rabbitmq/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: messagebus
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.24.6
    app.kubernetes.io/instance: RabbitMQ
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: amqp-ssl
      port: 5671
      targetPort: amqp-ssl
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
    - name: metrics
      port: 9419
      targetPort: metrics
      nodePort: null
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: RabbitMQ
---
# v1/Service messagebus-headless
# Source: rabbitmq/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: messagebus-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.24.6
    app.kubernetes.io/instance: RabbitMQ
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: amqp-ssl
      port: 5671
      targetPort: amqp-tls
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: RabbitMQ
  publishNotReadyAddresses: true
---
# v1/Service db
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: db
    gitpod.io/nodeService: db
  name: db
  namespace: default
spec:
  ports:
    - port: 3306
      protocol: TCP
      targetPort: 3306
  selector:
    app.kubernetes.io/name: mysql
  type: ClusterIP
status:
  loadBalancer: {}
---
# v1/Service blobserve
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: blobserve
    gitpod.io/nodeService: blobserve
    kind: service
  name: blobserve
  namespace: default
spec:
  ports:
    - name: service
      port: 4000
      protocol: TCP
      targetPort: 32224
  selector:
    app: gitpod
    component: blobserve
    gitpod.io/nodeService: blobserve
  type: ClusterIP
status:
  loadBalancer: {}
---
# v1/Service registry-facade
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: registry-facade
    gitpod.io/nodeService: registry-facade
    kind: service
  name: registry-facade
  namespace: default
spec:
  ports:
    - name: registry
      port: 30000
      protocol: TCP
      targetPort: 32223
  selector:
    app: gitpod
    component: registry-facade
    gitpod.io/nodeService: registry-facade
  type: ClusterIP
status:
  loadBalancer: {}
---
# v1/Service ws-daemon
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-daemon
    gitpod.io/nodeService: ws-daemon
    kind: service
  name: ws-daemon
  namespace: default
spec:
  clusterIP: None
  selector:
    app: gitpod
    component: ws-daemon
    gitpod.io/nodeService: ws-daemon
  type: ClusterIP
status:
  loadBalancer: {}
---
# v1/Service dashboard
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: dashboard
    gitpod.io/nodeService: dashboard
    kind: service
  name: dashboard
  namespace: default
spec:
  ports:
    - name: http
      port: 3001
      protocol: TCP
      targetPort: 80
  selector:
    app: gitpod
    component: dashboard
    gitpod.io/nodeService: dashboard
  type: ClusterIP
status:
  loadBalancer: {}
---
# v1/Service ide-proxy
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ide-proxy
    gitpod.io/nodeService: ide-proxy
    kind: service
  name: ide-proxy
  namespace: default
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
  selector:
    app: gitpod
    component: ide-proxy
    gitpod.io/nodeService: ide-proxy
  type: ClusterIP
status:
  loadBalancer: {}
---
# v1/Service minio
# Source: minio/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-9.0.6
    app.kubernetes.io/instance: Minio
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: minio-api
      port: 9000
      targetPort: minio-api
      nodePort: null
    - name: minio-console
      port: 9001
      targetPort: minio-console
      nodePort: null
  selector:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: Minio
---
# v1/Service ws-proxy
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-proxy
    gitpod.io/nodeService: ws-proxy
    kind: service
  name: ws-proxy
  namespace: default
spec:
  ports:
    - name: http-proxy
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: https-proxy
      port: 9090
      protocol: TCP
      targetPort: 9090
    - name: metrics
      port: 9500
      protocol: TCP
      targetPort: 9500
    - name: ssh
      port: 22
      protocol: TCP
      targetPort: 2200
  selector:
    app: gitpod
    component: ws-proxy
    gitpod.io/nodeService: ws-proxy
  type: ClusterIP
status:
  loadBalancer: {}
---
# v1/Service openvsx-proxy
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: openvsx-proxy
    gitpod.io/nodeService: openvsx-proxy
    kind: service
  name: openvsx-proxy
  namespace: default
spec:
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: metrics
      port: 9500
      protocol: TCP
      targetPort: 9500
  selector:
    app: gitpod
    component: openvsx-proxy
    gitpod.io/nodeService: openvsx-proxy
  type: ClusterIP
status:
  loadBalancer: {}
---
# v1/Service image-builder-mk3
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: image-builder-mk3
    gitpod.io/nodeService: image-builder-mk3
    kind: service
  name: image-builder-mk3
  namespace: default
spec:
  ports:
    - name: service
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: gitpod
    component: image-builder-mk3
    gitpod.io/nodeService: image-builder-mk3
  type: ClusterIP
status:
  loadBalancer: {}
---
# v1/Service content-service
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: content-service
    gitpod.io/nodeService: content-service
    kind: service
  name: content-service
  namespace: default
spec:
  ports:
    - name: metrics
      port: 9500
      protocol: TCP
      targetPort: 9500
    - name: rpc
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: gitpod
    component: content-service
    gitpod.io/nodeService: content-service
  type: ClusterIP
status:
  loadBalancer: {}
---
# v1/Service registry
# Source: docker-registry/charts/docker-registry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: registry
  namespace: default
  labels:
    app: docker-registry
    chart: docker-registry-1.16.0
    release: docker-registry
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - port: 443
      protocol: TCP
      name: https-443
      targetPort: 5000
  selector:
    app: docker-registry
    release: docker-registry
---
# v1/Service proxy
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/neg: '{"exposed_ports": {"80":{},"443": {}}}'
    external-dns.alpha.kubernetes.io/hostname: localhost,*.localhost,*.ws.localhost
  creationTimestamp: null
  labels:
    app: gitpod
    component: proxy
    gitpod.io/nodeService: proxy
    kind: service
  name: proxy
  namespace: default
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
    - name: metrics
      port: 9500
      protocol: TCP
      targetPort: 9500
  selector:
    app: gitpod
    component: proxy
    gitpod.io/nodeService: proxy
  type: LoadBalancer
status:
  loadBalancer: {}
---
# v1/Service mysql
# Source: mysql/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: default
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-8.6.2
    app.kubernetes.io/instance: MySQL
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: MySQL
    app.kubernetes.io/component: primary
---
# v1/Service ws-manager
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager
    gitpod.io/nodeService: ws-manager
    kind: service
  name: ws-manager
  namespace: default
spec:
  ports:
    - name: rpc
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: gitpod
    component: ws-manager
    gitpod.io/nodeService: ws-manager
  type: ClusterIP
status:
  loadBalancer: {}
---
# apps/v1/DaemonSet ws-daemon
apiVersion: apps/v1
kind: DaemonSet
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-daemon
    gitpod.io/nodeService: ws-daemon
  name: ws-daemon
  namespace: default
spec:
  selector:
    matchLabels:
      app: gitpod
      component: ws-daemon
      gitpod.io/nodeService: ws-daemon
  template:
    metadata:
      annotations:
        gitpod.io/checksum_config: 1d4c0269d94da46498755387c51330b5887622261462472bcb4698923b381cd4
        seccomp.security.alpha.kubernetes.io/shiftfs-module-loader: unconfined
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-daemon
        gitpod.io/nodeService: ws-daemon
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_workspace_regular
                    operator: Exists
              - matchExpressions:
                  - key: gitpod.io/workload_workspace_headless
                    operator: Exists
      containers:
        - args:
            - run
            - --config
            - /config/config.json
          env:
            - name: GITPOD_DOMAIN
              value: localhost
            - name: GITPOD_INSTALLATION_LONGNAME
              value: localhost
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: localhost
            - name: GITPOD_REGION
              value: local
            - name: HOST_URL
              value: https://localhost
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.cluster.local
            - name: LOG_LEVEL
              value: info
            - name: JAEGER_DISABLED
              value: "true"
            - name: NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          image: eu.gcr.io/gitpod-core-dev/build/ws-daemon:commit-764b0cf3b9e14607392b9e088c984a914c9ff24e
          imagePullPolicy: IfNotPresent
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - kubectl label --overwrite nodes ${NODENAME} gitpod.io/ws-daemon_ready_ns_${KUBE_NAMESPACE}=true
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - kubectl label nodes ${NODENAME} gitpod.io/ws-daemon_ready_ns_${KUBE_NAMESPACE}-
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /
              port: 9999
            initialDelaySeconds: 5
            periodSeconds: 10
          name: ws-daemon
          ports:
            - containerPort: 8080
              hostPort: 8080
              name: rpc
          readinessProbe:
            httpGet:
              path: /
              port: 9999
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            requests:
              cpu: 1m
              memory: 1Mi
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /mnt/workingarea
              mountPropagation: Bidirectional
              name: working-area
            - mountPath: /config
              name: config
            - mountPath: /mnt/containerd.sock
              name: containerd-socket
            - mountPath: /mnt/node0
              name: node-fs0
            - mountPath: /mnt/mounts
              #          mountPropagation: HostToContainer
              name: node-mounts
              readOnly: true
            - mountPath: /mnt/node-cgroups
              #          mountPropagation: HostToContainer
              name: node-cgroups
            - mountPath: /mnt/hosts
              name: node-hosts
            - mountPath: /certs
              name: tls-certs
            - mountPath: /mnt/sync-tmp
              name: gcloud-tmp
        - args:
            - --v=5
            - --logtostderr
            - --insecure-listen-address=[$(IP)]:9500
            - --upstream=http://127.0.0.1:9500/
          env:
            - name: IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          image: quay.io/brancz/kube-rbac-proxy:v0.11.0
          name: kube-rbac-proxy
          ports:
            - containerPort: 9500
              name: metrics
          resources:
            requests:
              cpu: 1m
              memory: 30Mi
          securityContext:
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePolicy: FallbackToLogsOnError
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      hostPID: true
      initContainers:
        - args:
            - "exec {BASH_XTRACEFD}>&1 # this causes 'set -x' to write to stdout insted
          of stderr\nset -euExo pipefail\nsystemctl status kube-container-runtime-monitor.service
          || true\nif [ \"$(systemctl is-active kube-container-runtime-monitor.service)\"
          == \"active\" ]\nthen\n\techo \"kube-container-runtime-monitor.service is
          active\"\n\tsystemctl stop kube-container-runtime-monitor.service\n\tsystemctl
          disable kube-container-runtime-monitor.service\n\tsystemctl status kube-container-runtime-monitor.service
          || true\nelse\n\techo \"kube-container-runtime-monitor.service is not active,
          not doing anything\"\nfi\n"
          command:
            - /usr/bin/nsenter
            - -t
            - "1"
            - -a
            - /bin/bash
            - -c
          image: docker.io/library/ubuntu:20.04
          name: disable-kube-health-monitor
          resources: {}
          securityContext:
            privileged: true
            procMount: Default
        - command:
            - /bin/sh
            - -c
            - cp -f /installer/workspace_default.json /mnt/dst/workspace_default_release-2022.02.0.1.json
          image: eu.gcr.io/gitpod-core-dev/build/seccomp-profile-installer:commit-f0c0c87899d21b0502c36036cdea091015b90c7a
          name: seccomp-profile-installer
          resources: {}
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /mnt/dst
              name: hostseccomp
        - command:
            - sh
            - -c
            - "(\n\techo \"running sysctls\" &&\n\tsysctl -w net.core.somaxconn=4096 &&\n\tsysctl
          -w \"net.ipv4.ip_local_port_range=5000 65000\" &&\n\tsysctl -w \"net.ipv4.tcp_tw_reuse=1\"
          &&\n\tsysctl -w fs.inotify.max_user_watches=1000000 &&\n\tsysctl -w \"kernel.dmesg_restrict=1\"
          &&\n\tsysctl -w vm.unprivileged_userfaultfd=0\n) && echo \"done!\" || echo
          \"failed!\"\n"
          image: eu.gcr.io/gitpod-core-dev/build/ws-daemon:commit-764b0cf3b9e14607392b9e088c984a914c9ff24e
          name: sysctl
          resources: {}
          securityContext:
            privileged: true
      priorityClassName: system-node-critical
      restartPolicy: Always
      serviceAccountName: ws-daemon
      terminationGracePeriodSeconds: 30
      tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/disk-pressure
          operator: Exists
        - effect: NoExecute
          key: node.kubernetes.io/memory-pressure
          operator: Exists
        - effect: NoExecute
          key: node.kubernetes.io/out-of-disk
          operator: Exists
      volumes:
        - hostPath:
            path: /
          name: hostfs
        - hostPath:
            path: /var/gitpod/workspaces
            type: DirectoryOrCreate
          name: working-area
        - name: tls-certs
          secret:
            secretName: ws-daemon-tls
        - configMap:
            name: ws-daemon
          name: config
        - hostPath:
            path: /run/k3s/containerd/containerd.sock
            type: Socket
          name: containerd-socket
        - hostPath:
            path: /run/k3s/containerd/io.containerd.runtime.v2.task/k8s.io
            type: Directory
          name: node-fs0
        - hostPath:
            path: /proc/mounts
            type: File
          name: node-mounts
        - hostPath:
            path: /sys/fs/cgroup
            type: Directory
          name: node-cgroups
        - hostPath:
            path: /etc/hosts
            type: File
          name: node-hosts
        - hostPath:
            path: /usr/src
            type: Directory
          name: node-linux-src
        - hostPath:
            path: /var/lib/kubelet/seccomp
          name: hostseccomp
        - hostPath:
            path: /var/gitpod/tmp/backup
            type: DirectoryOrCreate
          name: gcloud-tmp
  updateStrategy: {}
status:
  currentNumberScheduled: 0
  desiredNumberScheduled: 0
  numberMisscheduled: 0
  numberReady: 0
---
# apps/v1/DaemonSet registry-facade
apiVersion: apps/v1
kind: DaemonSet
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: registry-facade
    gitpod.io/nodeService: registry-facade
  name: registry-facade
  namespace: default
spec:
  selector:
    matchLabels:
      app: gitpod
      component: registry-facade
      gitpod.io/nodeService: registry-facade
  template:
    metadata:
      annotations:
        gitpod.io/checksum_config: e4b77df5f3b2887a5507ee522527dd1c2048f0e63387e50283504b3f8488416d
      creationTimestamp: null
      labels:
        app: gitpod
        component: registry-facade
        gitpod.io/nodeService: registry-facade
      name: registry-facade
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_workspace_regular
                    operator: Exists
              - matchExpressions:
                  - key: gitpod.io/workload_workspace_headless
                    operator: Exists
      containers:
        - args:
            - run
            - /mnt/config/config.json
          env:
            - name: GITPOD_DOMAIN
              value: localhost
            - name: GITPOD_INSTALLATION_LONGNAME
              value: localhost
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: localhost
            - name: GITPOD_REGION
              value: local
            - name: HOST_URL
              value: https://localhost
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.cluster.local
            - name: LOG_LEVEL
              value: info
            - name: JAEGER_DISABLED
              value: "true"
            - name: GRPC_GO_RETRY
              value: "on"
            - name: NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          image: eu.gcr.io/gitpod-core-dev/build/registry-facade:commit-fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9
          imagePullPolicy: IfNotPresent
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - kubectl label --overwrite nodes ${NODENAME} gitpod.io/registry-facade_ready_ns_${KUBE_NAMESPACE}=true
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - kubectl label nodes ${NODENAME} gitpod.io/registry-facade_ready_ns_${KUBE_NAMESPACE}-
          name: registry-facade
          ports:
            - containerPort: 32223
              hostPort: 30000
              name: registry
          resources:
            requests:
              cpu: 100m
              memory: 32Mi
          securityContext:
            privileged: false
            runAsUser: 1000
          volumeMounts:
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /mnt/config
              name: config
              readOnly: true
            - mountPath: /ws-manager-client-tls-certs
              name: ws-manager-client-tls-certs
              readOnly: true
            - mountPath: /mnt/pull-secret.json
              name: pull-secret
              subPath: .dockerconfigjson
            - mountPath: /etc/ssl/certs
              name: cacerts
              readOnly: true
            - mountPath: /mnt/certificates
              name: config-certificates
        - args:
            - --v=5
            - --logtostderr
            - --insecure-listen-address=[$(IP)]:9500
            - --upstream=http://127.0.0.1:9500/
          env:
            - name: IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          image: quay.io/brancz/kube-rbac-proxy:v0.11.0
          name: kube-rbac-proxy
          ports:
            - containerPort: 9500
              name: metrics
          resources:
            requests:
              cpu: 1m
              memory: 30Mi
          securityContext:
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePolicy: FallbackToLogsOnError
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      initContainers:
        - command:
            - bash
            - -c
            - set -e; update-ca-certificates -f; cp /etc/ssl/certs/* /ssl-certs; echo
              'OK'
          image: eu.gcr.io/gitpod-core-dev/build/ca-updater:commit-f0c0c87899d21b0502c36036cdea091015b90c7a
          imagePullPolicy: IfNotPresent
          name: update-ca-certificates
          resources: {}
          volumeMounts:
            - mountPath: /ssl-certs
              name: cacerts
            - mountPath: /usr/local/share/ca-certificates/gitpod-ca.crt
              name: gitpod-ca-certificate
              subPath: ca.crt
        - command:
            - sh
            - -c
            - $(SETUP_SCRIPT)
          env:
            - name: GITPOD_CA_CERT
              valueFrom:
                secretKeyRef:
                  key: ca.crt
                  name: builtin-registry-facade-cert
            - name: SETUP_SCRIPT
              value: TARGETS="docker containerd";for TARGET in $TARGETS;do mkdir -p /mnt/dst/etc/$TARGET/certs.d/reg.localhost:30000
                && echo "$GITPOD_CA_CERT" > /mnt/dst/etc/$TARGET/certs.d/reg.localhost:30000/ca.crt
                && echo "OK";done
          image: eu.gcr.io/gitpod-core-dev/build/ca-updater:commit-f0c0c87899d21b0502c36036cdea091015b90c7a
          imagePullPolicy: IfNotPresent
          name: update-containerd-certificates
          resources: {}
          volumeMounts:
            - mountPath: /ssl-certs
              name: cacerts
            - mountPath: /usr/local/share/ca-certificates/gitpod-ca.crt
              name: gitpod-ca-certificate
              subPath: ca.crt
            - mountPath: /mnt/dst
              name: hostfs
      priorityClassName: system-node-critical
      restartPolicy: Always
      serviceAccountName: registry-facade
      terminationGracePeriodSeconds: 30
      volumes:
        - emptyDir: {}
          name: cache
        - configMap:
            name: registry-facade
          name: config
        - name: ws-manager-client-tls-certs
          secret:
            secretName: ws-manager-client-tls
        - name: pull-secret
          secret:
            secretName: builtin-registry-auth
        - hostPath:
            path: /
          name: hostfs
        - emptyDir: {}
          name: gitpod-ca-certificate
        - emptyDir: {}
          name: cacerts
        - name: config-certificates
          secret:
            secretName: https-certificates
  updateStrategy: {}
status:
  currentNumberScheduled: 0
  desiredNumberScheduled: 0
  numberMisscheduled: 0
  numberReady: 0
---
# apps/v1/DaemonSet agent-smith
apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations:
    gitpod.io/checksum_config: 414321a48d5cd8c8f0fe209b171b54b3e265b3fa9e892f980a5618b999828be7
  creationTimestamp: null
  labels:
    app: gitpod
    component: agent-smith
    gitpod.io/nodeService: agent-smith
  name: agent-smith
  namespace: default
spec:
  selector:
    matchLabels:
      app: gitpod
      component: agent-smith
      gitpod.io/nodeService: agent-smith
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: agent-smith
        gitpod.io/nodeService: agent-smith
      name: agent-smith
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_workspace_regular
                    operator: Exists
              - matchExpressions:
                  - key: gitpod.io/workload_workspace_headless
                    operator: Exists
      containers:
        - args:
            - run
            - --config
            - /config/config.json
          env:
            - name: GITPOD_DOMAIN
              value: localhost
            - name: GITPOD_INSTALLATION_LONGNAME
              value: localhost
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: localhost
            - name: GITPOD_REGION
              value: local
            - name: HOST_URL
              value: https://localhost
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.cluster.local
            - name: LOG_LEVEL
              value: info
            - name: JAEGER_DISABLED
              value: "true"
            - name: NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          image: eu.gcr.io/gitpod-core-dev/build/agent-smith:commit-8064ece916010858ea846f54f5a4b2c882ca4d42
          imagePullPolicy: IfNotPresent
          name: agent-smith
          resources:
            requests:
              cpu: 100m
              memory: 32Mi
          securityContext:
            privileged: true
            procMount: Default
          volumeMounts:
            - mountPath: /config
              name: config
        - args:
            - --v=5
            - --logtostderr
            - --insecure-listen-address=[$(IP)]:9500
            - --upstream=http://127.0.0.1:9500/
          env:
            - name: IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          image: quay.io/brancz/kube-rbac-proxy:v0.11.0
          name: kube-rbac-proxy
          ports:
            - containerPort: 9500
              name: metrics
          resources:
            requests:
              cpu: 1m
              memory: 30Mi
          securityContext:
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePolicy: FallbackToLogsOnError
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      hostPID: true
      restartPolicy: Always
      serviceAccountName: agent-smith
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            name: agent-smith
          name: config
  updateStrategy: {}
status:
  currentNumberScheduled: 0
  desiredNumberScheduled: 0
  numberMisscheduled: 0
  numberReady: 0
---
# apps/v1/StatefulSet mysql
# Source: mysql/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: default
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-8.6.2
    app.kubernetes.io/instance: MySQL
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: MySQL
      app.kubernetes.io/component: primary
  serviceName: mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: cc4c506359c54ee21c3be8576b9a29a212a5345e4fe70f8a7a4766516915f052
      labels:
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-8.6.2
        app.kubernetes.io/instance: MySQL
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:

      serviceAccountName: db
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_meta
                    operator: Exists

      securityContext:
        fsGroup: 1001
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/bitnami-shell:10-debian-10-r92
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              chown -R 1001:1001 /bitnami/mysql
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:5.7.34-debian-10-r55
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: mysql-root-password
            - name: MYSQL_USER
              value: "gitpod"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: mysql-password
            - name: MYSQL_DATABASE
              value: "gitpod"
            - name: MYSQL_EXTRA_FLAGS
              value: --explicit-defaults-for-timestamp=OFF
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources:
            limits: {}
            requests:
              memory: 128Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: mysql
        - name: custom-init-scripts
          configMap:
            name: db-init-scripts
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: mysql
          app.kubernetes.io/instance: MySQL
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# apps/v1/StatefulSet messagebus
# Source: rabbitmq/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: messagebus
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.24.6
    app.kubernetes.io/instance: RabbitMQ
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: messagebus-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: RabbitMQ
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.24.6
        app.kubernetes.io/instance: RabbitMQ
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: b17622a47bf6b09094fb0ecde602082373ff5987a937bbfe028a35dbd963a6f5
        checksum/secret: 6018add046f17226aba53a13947a8105ceb4ac33e1e68f6238bd66ca79247e60

        prometheus.io/port: '9419'
        prometheus.io/scrape: "true"
    spec:

      serviceAccountName: rabbitmq
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_meta
                    operator: Exists

      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 120
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.9.10-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "messagebus-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: messagebus-erlang-cookie
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "yes"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "no"
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_prometheus"
            - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
              value: +sbwt none +sbwtdcpu none +sbwtdio none
          ports:
            - name: amqp
              containerPort: 5672
            - name: amqp-ssl
              containerPort: 5671
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
            - name: metrics
              containerPort: 9419
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d  "false"
                    else
                        rabbitmqctl stop_app
                    fi
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
            - name: certs
              mountPath: /opt/bitnami/rabbitmq/certs
            - name: load-definition-volume
              mountPath: /app
              readOnly: true
      volumes:
        - name: certs
          secret:
            secretName: messagebus-certificates-secret-core
            items:
              - key: tls.crt
                path: ca_certificate.pem
              - key: tls.crt
                path: server_certificate.pem
              - key: tls.key
                path: server_key.pem
        - name: configuration
          configMap:
            name: messagebus-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
        - name: load-definition-volume
          secret:
            secretName: "load-definition"
        - name: data
          emptyDir: {}
---
# apps/v1/StatefulSet openvsx-proxy
apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: openvsx-proxy
    gitpod.io/nodeService: openvsx-proxy
  name: openvsx-proxy
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitpod
      component: openvsx-proxy
      gitpod.io/nodeService: openvsx-proxy
  serviceName: openvsx-proxy
  template:
    metadata:
      annotations:
        gitpod.io/checksum_config: 15bbc7c4e2f3709a06583b0d96e22e44e71dc8e136d05acdce0d2307b15c991a
      creationTimestamp: null
      labels:
        app: gitpod
        component: openvsx-proxy
        gitpod.io/nodeService: openvsx-proxy
      name: openvsx-proxy
      namespace: default
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_ide
                    operator: Exists
      containers:
        - args:
            - /config/config.json
          env:
            - name: GITPOD_DOMAIN
              value: localhost
            - name: GITPOD_INSTALLATION_LONGNAME
              value: localhost
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: localhost
            - name: GITPOD_REGION
              value: local
            - name: HOST_URL
              value: https://localhost
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.cluster.local
            - name: LOG_LEVEL
              value: info
          image: eu.gcr.io/gitpod-core-dev/build/openvsx-proxy:commit-fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9
          imagePullPolicy: IfNotPresent
          name: openvsx-proxy
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 9500
              name: metrics
          readinessProbe:
            httpGet:
              path: /openvsx-proxy-status
              port: 8080
          resources:
            requests:
              cpu: 1m
              memory: 2304Mi
          volumeMounts:
            - mountPath: /config
              name: config
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      restartPolicy: Always
      serviceAccountName: openvsx-proxy
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            name: openvsx-proxy-config
          name: config
  updateStrategy: {}
status:
  replicas: 0
---
# apps/v1/Deployment blobserve
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: blobserve
    gitpod.io/nodeService: blobserve
  name: blobserve
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitpod
      component: blobserve
      gitpod.io/nodeService: blobserve
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        gitpod.io/checksum_config: ddcaea27b1749bba3c89a5ef295a7cab6452305d93be2f00c4402cb55665b146
      creationTimestamp: null
      labels:
        app: gitpod
        component: blobserve
        gitpod.io/nodeService: blobserve
      name: blobserve
      namespace: default
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_workspace_services
                    operator: Exists
      containers:
        - args:
            - run
            - /mnt/config/config.json
          env:
            - name: GITPOD_DOMAIN
              value: localhost
            - name: GITPOD_INSTALLATION_LONGNAME
              value: localhost
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: localhost
            - name: GITPOD_REGION
              value: local
            - name: HOST_URL
              value: https://localhost
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.cluster.local
            - name: LOG_LEVEL
              value: info
            - name: JAEGER_DISABLED
              value: "true"
          image: eu.gcr.io/gitpod-core-dev/build/blobserve:commit-fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9
          imagePullPolicy: IfNotPresent
          name: blobserve
          ports:
            - containerPort: 32224
              name: service
          resources:
            requests:
              cpu: 100m
              memory: 32Mi
          securityContext:
            privileged: false
            runAsUser: 1000
          volumeMounts:
            - mountPath: /mnt/config
              name: config
              readOnly: true
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /mnt/pull-secret.json
              name: pull-secret
              subPath: .dockerconfigjson
        - args:
            - --v=5
            - --logtostderr
            - --insecure-listen-address=[$(IP)]:9500
            - --upstream=http://127.0.0.1:9500/
          env:
            - name: IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          image: quay.io/brancz/kube-rbac-proxy:v0.11.0
          name: kube-rbac-proxy
          ports:
            - containerPort: 9500
              name: metrics
          resources:
            requests:
              cpu: 1m
              memory: 30Mi
          securityContext:
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePolicy: FallbackToLogsOnError
      enableServiceLinks: false
      serviceAccountName: blobserve
      volumes:
        - emptyDir: {}
          name: cache
        - configMap:
            name: blobserve
          name: config
        - name: pull-secret
          secret:
            secretName: builtin-registry-auth
status: {}
---
# apps/v1/Deployment minio
# Source: minio/charts/minio/templates/standalone/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-9.0.6
    app.kubernetes.io/instance: Minio
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: minio
      app.kubernetes.io/instance: Minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-9.0.6
        app.kubernetes.io/instance: Minio
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/credentials-secret: d2201d58c393cd0612d2ff4ab4a46a950e9304e955b2253ce8acea148e52fabd
    spec:

      serviceAccountName: minio
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_meta
                    operator: Exists

      securityContext:
        fsGroup: 1001
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2021.10.27-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_SCHEME
              value: "http"
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: root-password
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
            - name: MINIO_CONSOLE_PORT_NUMBER
              value: "9001"
            - name: MINIO_SKIP_CLIENT
              value: "yes"
          envFrom:
          ports:
            - name: minio-api
              containerPort: 9000
              protocol: TCP
            - name: minio-console
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-api
              scheme: "HTTP"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: minio-api
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests:
              memory: 2G
          volumeMounts:
            - name: data
              mountPath: /data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: minio
---
# apps/v1/Deployment proxy
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: proxy
    gitpod.io/nodeService: proxy
  name: proxy
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitpod
      component: proxy
      gitpod.io/nodeService: proxy
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        gitpod.io/checksum_config: 099d8d1385588963afa57dd1fd17a885487d68608198bf10331a25b401731e9b
      creationTimestamp: null
      labels:
        app: gitpod
        component: proxy
        gitpod.io/nodeService: proxy
      name: proxy
      namespace: default
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_meta
                    operator: Exists
      containers:
        - args:
            - --v=10
            - --logtostderr
            - --insecure-listen-address=[$(IP)]:9500
            - --upstream=http://127.0.0.1:9545/
          env:
            - name: IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          image: quay.io/brancz/kube-rbac-proxy:v0.11.0
          imagePullPolicy: IfNotPresent
          name: kube-rbac-proxy
          ports:
            - containerPort: 9500
              name: metrics
              protocol: TCP
          resources:
            requests:
              cpu: 1m
              memory: 30Mi
          securityContext:
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
        - env:
            - name: GITPOD_DOMAIN
              value: localhost
            - name: GITPOD_INSTALLATION_LONGNAME
              value: localhost
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: localhost
            - name: GITPOD_REGION
              value: local
            - name: HOST_URL
              value: https://localhost
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.cluster.local
            - name: LOG_LEVEL
              value: info
            - name: PROXY_DOMAIN
              value: localhost
          image: eu.gcr.io/gitpod-core-dev/build/proxy:commit-4593c9e3ced634759e9e7a6aebcdb76be6b6481a
          imagePullPolicy: IfNotPresent
          name: proxy
          ports:
            - containerPort: 80
              name: http
            - containerPort: 443
              name: https
            - containerPort: 22
              name: ssh
              protocol: TCP
            - containerPort: 9500
              name: metrics
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8003
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            privileged: false
          volumeMounts:
            - mountPath: /etc/caddy/vhosts
              name: vhosts
            - mountPath: /etc/caddy/certificates
              name: config-certificates
            - mountPath: /etc/caddy/registry-auth
              name: builtin-registry-auth
            - mountPath: /etc/caddy/registry-certs
              name: builtin-registry-certs
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      initContainers:
        - command:
            - sh
            - -c
            - sysctl -w net.core.somaxconn=32768; sysctl -w net.ipv4.ip_local_port_range='1024
              65000'
          image: docker.io/library/alpine:3.15
          imagePullPolicy: IfNotPresent
          name: sysctl
          resources: {}
          securityContext:
            privileged: true
      priorityClassName: system-node-critical
      restartPolicy: Always
      securityContext:
        runAsNonRoot: false
      serviceAccountName: proxy
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            name: proxy-config
          name: vhosts
        - name: config-certificates
          secret:
            secretName: https-certificates
        - name: builtin-registry-auth
          secret:
            secretName: builtin-registry-auth
        - name: builtin-registry-certs
          secret:
            secretName: builtin-registry-certs
status: {}
---
# apps/v1/Deployment dashboard
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: dashboard
    gitpod.io/nodeService: dashboard
  name: dashboard
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitpod
      component: dashboard
      gitpod.io/nodeService: dashboard
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: dashboard
        gitpod.io/nodeService: dashboard
      name: dashboard
      namespace: default
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_meta
                    operator: Exists
      containers:
        - env:
            - name: GITPOD_DOMAIN
              value: localhost
            - name: GITPOD_INSTALLATION_LONGNAME
              value: localhost
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: localhost
            - name: GITPOD_REGION
              value: local
            - name: HOST_URL
              value: https://localhost
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.cluster.local
            - name: LOG_LEVEL
              value: info
          image: eu.gcr.io/gitpod-core-dev/build/dashboard:commit-9d895536db0c62cf42f175843cb7122e8dddcd43
          imagePullPolicy: IfNotPresent
          name: dashboard
          ports:
            - containerPort: 80
              name: http
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 32Mi
          securityContext:
            privileged: false
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      restartPolicy: Always
      serviceAccountName: dashboard
      terminationGracePeriodSeconds: 30
status: {}
---
# apps/v1/Deployment server
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: server
    gitpod.io/nodeService: server
  name: server
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitpod
      component: server
      gitpod.io/nodeService: server
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        gitpod.io/checksum_config: ba797fa6224f036c254770f3be7caebb3950ba091a458c9e0f6c5c9304f1f6ad
      creationTimestamp: null
      labels:
        app: gitpod
        component: server
        gitpod.io/nodeService: server
      name: server
      namespace: default
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_meta
                    operator: Exists
      containers:
        - env:
            - name: GITPOD_DOMAIN
              value: localhost
            - name: GITPOD_INSTALLATION_LONGNAME
              value: localhost
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: localhost
            - name: GITPOD_REGION
              value: local
            - name: HOST_URL
              value: https://localhost
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.cluster.local
            - name: LOG_LEVEL
              value: info
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  key: host
                  name: mysql
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: mysql
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: mysql
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: mysql
            - name: DB_ENCRYPTION_KEYS
              valueFrom:
                secretKeyRef:
                  key: encryptionKeys
                  name: mysql
            - name: DB_DELETED_ENTRIES_GC_ENABLED
              value: "false"
            - name: JAEGER_DISABLED
              value: "true"
            - name: MESSAGEBUS_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: rabbitmq
            - name: MESSAGEBUS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: rabbitmq
            - name: MESSAGEBUS_CA
              valueFrom:
                secretKeyRef:
                  key: ca.crt
                  name: messagebus-certificates-secret-core
            - name: MESSAGEBUS_CERT
              valueFrom:
                secretKeyRef:
                  key: tls.crt
                  name: messagebus-certificates-secret-core
            - name: MESSAGEBUS_KEY
              valueFrom:
                secretKeyRef:
                  key: tls.key
                  name: messagebus-certificates-secret-core
            - name: CONFIG_PATH
              value: /config/config.json
            - name: IDE_CONFIG_PATH
              value: /ide-config/config.json
            - name: NODE_ENV
              value: production
            - name: SHLVL
              value: "1"
            - name: WSMAN_CFG_MANAGERS
              value: WwogIHsKICAgICJuYW1lIjogImRlZmF1bHQiLAogICAgInVybCI6ICJkbnM6Ly8vd3MtbWFuYWdlcjo4MDgwIiwKICAgICJ0bHMiOiB7CiAgICAgICJjYSI6ICIvd3MtbWFuYWdlci1jbGllbnQtdGxzLWNlcnRzL2NhLmNydCIsCiAgICAgICJjcnQiOiAiL3dzLW1hbmFnZXItY2xpZW50LXRscy1jZXJ0cy90bHMuY3J0IiwKICAgICAgImtleSI6ICIvd3MtbWFuYWdlci1jbGllbnQtdGxzLWNlcnRzL3Rscy5rZXkiCiAgICB9LAogICAgInN0YXRlIjogImF2YWlsYWJsZSIsCiAgICAibWF4U2NvcmUiOiAxMDAsCiAgICAic2NvcmUiOiA1MCwKICAgICJnb3Zlcm4iOiB0cnVlLAogICAgImFkbWlzc2lvbkNvbnN0cmFpbnRzIjogbnVsbAogIH0KXQ==
          image: eu.gcr.io/gitpod-core-dev/build/server:commit-319e34f8b189bdc9424768c41aca213f9d06eafe
          imagePullPolicy: IfNotPresent
          name: server
          ports:
            - containerPort: 3000
              name: http
            - containerPort: 9500
              name: metrics
          resources:
            requests:
              cpu: 200m
              memory: 200Mi
          securityContext:
            privileged: false
            runAsUser: 31001
          volumeMounts:
            - mountPath: /config
              name: config
              readOnly: true
            - mountPath: /ide-config
              name: ide-config
              readOnly: true
            - mountPath: /ws-manager-client-tls-certs
              name: ws-manager-client-tls-certs
              readOnly: true
        - args:
            - --v=5
            - --logtostderr
            - --insecure-listen-address=[$(IP)]:9500
            - --upstream=http://127.0.0.1:9500/
          env:
            - name: IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          image: quay.io/brancz/kube-rbac-proxy:v0.11.0
          name: kube-rbac-proxy
          ports:
            - containerPort: 9500
              name: metrics
          resources:
            requests:
              cpu: 1m
              memory: 30Mi
          securityContext:
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePolicy: FallbackToLogsOnError
      enableServiceLinks: false
      initContainers:
        - args:
            - -v
            - database
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  key: host
                  name: mysql
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: mysql
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: mysql
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: mysql
            - name: DB_ENCRYPTION_KEYS
              valueFrom:
                secretKeyRef:
                  key: encryptionKeys
                  name: mysql
            - name: DB_DELETED_ENTRIES_GC_ENABLED
              value: "false"
          image: eu.gcr.io/gitpod-core-dev/build/service-waiter:commit-fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9
          name: database-waiter
          resources: {}
          securityContext:
            privileged: false
            runAsUser: 31001
        - args:
            - -v
            - messagebus
          env:
            - name: MESSAGEBUS_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: rabbitmq
            - name: MESSAGEBUS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: rabbitmq
            - name: MESSAGEBUS_CA
              valueFrom:
                secretKeyRef:
                  key: ca.crt
                  name: messagebus-certificates-secret-core
            - name: MESSAGEBUS_CERT
              valueFrom:
                secretKeyRef:
                  key: tls.crt
                  name: messagebus-certificates-secret-core
            - name: MESSAGEBUS_KEY
              valueFrom:
                secretKeyRef:
                  key: tls.key
                  name: messagebus-certificates-secret-core
          image: eu.gcr.io/gitpod-core-dev/build/service-waiter:commit-fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9
          name: msgbus-waiter
          resources: {}
          securityContext:
            privileged: false
            runAsUser: 31001
      priorityClassName: system-node-critical
      serviceAccountName: server
      volumes:
        - configMap:
            name: server-config
          name: config
        - configMap:
            name: server-ide-config
          name: ide-config
        - name: ws-manager-client-tls-certs
          secret:
            secretName: ws-manager-client-tls
status: {}
---
# apps/v1/Deployment content-service
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: content-service
    gitpod.io/nodeService: content-service
  name: content-service
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitpod
      component: content-service
      gitpod.io/nodeService: content-service
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        gitpod.io/checksum_config: 14166aeb3ec3c0e3ab17c2a2d5f316b555ff13315c3a636cd92043220dc5c30c
      creationTimestamp: null
      labels:
        app: gitpod
        component: content-service
        gitpod.io/nodeService: content-service
      name: content-service
      namespace: default
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_meta
                    operator: Exists
      containers:
        - args:
            - run
            - --config
            - /config/config.json
          env:
            - name: GITPOD_DOMAIN
              value: localhost
            - name: GITPOD_INSTALLATION_LONGNAME
              value: localhost
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: localhost
            - name: GITPOD_REGION
              value: local
            - name: HOST_URL
              value: https://localhost
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.cluster.local
            - name: LOG_LEVEL
              value: info
            - name: JAEGER_DISABLED
              value: "true"
            - name: GRPC_GO_RETRY
              value: "on"
          image: eu.gcr.io/gitpod-core-dev/build/content-service:commit-04d1fb4efcb299e8eaf92ac54a949a4cf6fff930
          imagePullPolicy: IfNotPresent
          name: content-service
          ports:
            - containerPort: 8080
              name: rpc
            - containerPort: 9500
              name: metrics
          resources:
            requests:
              cpu: 100m
              memory: 32Mi
          securityContext:
            privileged: false
            runAsUser: 1000
          volumeMounts:
            - mountPath: /config
              name: config
              readOnly: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      restartPolicy: Always
      serviceAccountName: content-service
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            name: content-service
          name: config
status: {}
---
# apps/v1/Deployment ide-proxy
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ide-proxy
    gitpod.io/nodeService: ide-proxy
  name: ide-proxy
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitpod
      component: ide-proxy
      gitpod.io/nodeService: ide-proxy
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: ide-proxy
        gitpod.io/nodeService: ide-proxy
      name: ide-proxy
      namespace: default
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_meta
                    operator: Exists
      containers:
        - env:
            - name: GITPOD_DOMAIN
              value: localhost
            - name: GITPOD_INSTALLATION_LONGNAME
              value: localhost
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: localhost
            - name: GITPOD_REGION
              value: local
            - name: HOST_URL
              value: https://localhost
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.cluster.local
            - name: LOG_LEVEL
              value: info
          image: eu.gcr.io/gitpod-core-dev/build/ide-proxy:commit-4593c9e3ced634759e9e7a6aebcdb76be6b6481a
          imagePullPolicy: IfNotPresent
          name: ide-proxy
          ports:
            - containerPort: 80
              name: http
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 32Mi
          securityContext:
            privileged: false
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      restartPolicy: Always
      serviceAccountName: ide-proxy
      terminationGracePeriodSeconds: 30
status: {}
---
# apps/v1/Deployment registry
# Source: docker-registry/charts/docker-registry/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry
  namespace: default
  labels:
    app: docker-registry
    chart: docker-registry-1.16.0
    release: docker-registry
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: docker-registry
      release: docker-registry
  replicas: 1
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: docker-registry
        release: docker-registry
      annotations:
        checksum/config: 1d22b82e19bbc654e029029c4fb86ad02dc13422dc3ac52f8175ad190e52a0bb
        gitpod.io/checksum_config: adc9382e11621666b3660e8366c12fda081c077c36a6dc2805855df8ad3d7c86
    spec:
      serviceAccountName: docker-registry
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:
        - name: docker-registry
          image: "docker.io/library/registry:2.7.1"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/registry
            - serve
            - /etc/docker/registry/config.yml
          ports:
            - containerPort: 5000
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 5000
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 5000
          resources:
            {}
          env:
            - name: REGISTRY_HTTP_SECRET
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: haSharedSecret
            - name: REGISTRY_HTTP_TLS_CERTIFICATE
              value: /etc/ssl/docker/tls.crt
            - name: REGISTRY_HTTP_TLS_KEY
              value: /etc/ssl/docker/tls.key
            - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
              value: "/var/lib/registry"
          volumeMounts:
            - name: data
              mountPath: /var/lib/registry/
            - name: "registry-config"
              mountPath: "/etc/docker/registry"
            - mountPath: /etc/ssl/docker
              name: tls-cert
              readOnly: true
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: registry
        - name: registry-config
          configMap:
            name: registry-config
        - name: tls-cert
          secret:
            secretName: builtin-registry-certs
---
# apps/v1/Deployment ws-proxy
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-proxy
    gitpod.io/nodeService: ws-proxy
  name: ws-proxy
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitpod
      component: ws-proxy
      gitpod.io/nodeService: ws-proxy
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        gitpod.io/checksum_config: b25f7b78a5820a1ffc90d988e0d74904b13198ef0cb75651c0df3a9010ceeb23
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-proxy
        gitpod.io/nodeService: ws-proxy
      name: ws-proxy
      namespace: default
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_workspace_services
                    operator: Exists
      containers:
        - args:
            - run
            - /config/config.json
          env:
            - name: GITPOD_DOMAIN
              value: localhost
            - name: GITPOD_INSTALLATION_LONGNAME
              value: localhost
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: localhost
            - name: GITPOD_REGION
              value: local
            - name: HOST_URL
              value: https://localhost
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.cluster.local
            - name: LOG_LEVEL
              value: info
            - name: JAEGER_DISABLED
              value: "true"
          image: eu.gcr.io/gitpod-core-dev/build/ws-proxy:commit-bd231e14a69408cef500bf8925e237105babc5bf
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /healthz
              port: 60088
            initialDelaySeconds: 2
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 2
          name: ws-proxy
          ports:
            - containerPort: 8080
              name: http-proxy
            - containerPort: 9090
              name: https-proxy
            - containerPort: 9500
              name: metrics
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /readyz
              port: 60088
            initialDelaySeconds: 2
            periodSeconds: 5
          resources:
            requests:
              cpu: 100m
              memory: 32Mi
          securityContext:
            privileged: false
          volumeMounts:
            - mountPath: /config
              name: config
              readOnly: true
            - mountPath: /ws-manager-client-tls-certs
              name: ws-manager-client-tls-certs
              readOnly: true
            - mountPath: /mnt/certificates
              name: config-certificates
      enableServiceLinks: false
      priorityClassName: system-node-critical
      securityContext:
        runAsUser: 31002
      serviceAccountName: ws-proxy
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app: gitpod
              component: ws-proxy
              gitpod.io/nodeService: ws-proxy
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
      volumes:
        - configMap:
            name: ws-proxy
          name: config
        - name: ws-manager-client-tls-certs
          secret:
            secretName: ws-manager-client-tls
        - name: config-certificates
          secret:
            secretName: https-certificates
status: {}
---
# apps/v1/Deployment ws-manager
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager
    gitpod.io/nodeService: ws-manager
  name: ws-manager
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitpod
      component: ws-manager
      gitpod.io/nodeService: ws-manager
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        gitpod.io/checksum_config: bb187e9ff55a5f89173d45058f9d0c46fa8962da8f9c9ca441f9ae20ddc2fcac
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager
        gitpod.io/nodeService: ws-manager
      name: ws-manager
      namespace: default
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_workspace_services
                    operator: Exists
      containers:
        - args:
            - run
            - --config
            - /config/config.json
          env:
            - name: GITPOD_DOMAIN
              value: localhost
            - name: GITPOD_INSTALLATION_LONGNAME
              value: localhost
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: localhost
            - name: GITPOD_REGION
              value: local
            - name: HOST_URL
              value: https://localhost
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.cluster.local
            - name: LOG_LEVEL
              value: info
            - name: JAEGER_DISABLED
              value: "true"
            - name: GRPC_GO_RETRY
              value: "on"
          image: eu.gcr.io/gitpod-core-dev/build/ws-manager:commit-363b2206969c3c7ad05994b55b197a1ef334c5c3
          imagePullPolicy: IfNotPresent
          name: ws-manager
          ports:
            - containerPort: 8080
              name: rpc
          resources:
            requests:
              cpu: 100m
              memory: 32Mi
          securityContext:
            privileged: false
          volumeMounts:
            - mountPath: /config
              name: config
              readOnly: true
            - mountPath: /workspace-templates
              name: workspace-template
              readOnly: true
            - mountPath: /ws-daemon-tls-certs
              name: ws-daemon-tls-certs
              readOnly: true
            - mountPath: /certs
              name: tls-certs
              readOnly: true
        - args:
            - --v=5
            - --logtostderr
            - --insecure-listen-address=[$(IP)]:9500
            - --upstream=http://127.0.0.1:9500/
          env:
            - name: IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          image: quay.io/brancz/kube-rbac-proxy:v0.11.0
          name: kube-rbac-proxy
          ports:
            - containerPort: 9500
              name: metrics
          resources:
            requests:
              cpu: 1m
              memory: 30Mi
          securityContext:
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePolicy: FallbackToLogsOnError
      enableServiceLinks: false
      priorityClassName: system-node-critical
      securityContext:
        runAsUser: 31002
      serviceAccountName: ws-manager
      volumes:
        - configMap:
            name: ws-manager
          name: config
        - configMap:
            name: workspace-templates
          name: workspace-template
        - name: ws-daemon-tls-certs
          secret:
            secretName: ws-daemon-tls
        - name: tls-certs
          secret:
            secretName: ws-manager-tls
status: {}
---
# apps/v1/Deployment ws-manager-bridge
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: ws-manager-bridge
    gitpod.io/nodeService: ws-manager-bridge
  name: ws-manager-bridge
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitpod
      component: ws-manager-bridge
      gitpod.io/nodeService: ws-manager-bridge
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        gitpod.io/checksum_config: 9d2a89e33402cd71daef340fc4775ba9c2b26284c95fda8ca8c6938dc00f1423
      creationTimestamp: null
      labels:
        app: gitpod
        component: ws-manager-bridge
        gitpod.io/nodeService: ws-manager-bridge
      name: ws-manager-bridge
      namespace: default
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_meta
                    operator: Exists
      containers:
        - env:
            - name: GITPOD_DOMAIN
              value: localhost
            - name: GITPOD_INSTALLATION_LONGNAME
              value: localhost
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: localhost
            - name: GITPOD_REGION
              value: local
            - name: HOST_URL
              value: https://localhost
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.cluster.local
            - name: LOG_LEVEL
              value: info
            - name: JAEGER_DISABLED
              value: "true"
            - name: MESSAGEBUS_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: rabbitmq
            - name: MESSAGEBUS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: rabbitmq
            - name: MESSAGEBUS_CA
              valueFrom:
                secretKeyRef:
                  key: ca.crt
                  name: messagebus-certificates-secret-core
            - name: MESSAGEBUS_CERT
              valueFrom:
                secretKeyRef:
                  key: tls.crt
                  name: messagebus-certificates-secret-core
            - name: MESSAGEBUS_KEY
              valueFrom:
                secretKeyRef:
                  key: tls.key
                  name: messagebus-certificates-secret-core
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  key: host
                  name: mysql
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: mysql
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: mysql
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: mysql
            - name: DB_ENCRYPTION_KEYS
              valueFrom:
                secretKeyRef:
                  key: encryptionKeys
                  name: mysql
            - name: DB_DELETED_ENTRIES_GC_ENABLED
              value: "false"
            - name: WSMAN_BRIDGE_CONFIGPATH
              value: /config/ws-manager-bridge.json
          image: eu.gcr.io/gitpod-core-dev/build/ws-manager-bridge:commit-0d0df6ce5870c0fc136687844f4d0f153f2f4101
          imagePullPolicy: IfNotPresent
          name: ws-manager-bridge
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            privileged: false
            runAsUser: 31001
          volumeMounts:
            - mountPath: /config
              name: config
              readOnly: true
            - mountPath: /ws-manager-client-tls-certs
              name: ws-manager-client-tls-certs
              readOnly: true
        - args:
            - --v=5
            - --logtostderr
            - --insecure-listen-address=[$(IP)]:9500
            - --upstream=http://127.0.0.1:9500/
          env:
            - name: IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          image: quay.io/brancz/kube-rbac-proxy:v0.11.0
          name: kube-rbac-proxy
          ports:
            - containerPort: 9500
              name: metrics
          resources:
            requests:
              cpu: 1m
              memory: 30Mi
          securityContext:
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePolicy: FallbackToLogsOnError
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      initContainers:
        - args:
            - -v
            - database
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  key: host
                  name: mysql
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: mysql
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: mysql
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: mysql
            - name: DB_ENCRYPTION_KEYS
              valueFrom:
                secretKeyRef:
                  key: encryptionKeys
                  name: mysql
            - name: DB_DELETED_ENTRIES_GC_ENABLED
              value: "false"
          image: eu.gcr.io/gitpod-core-dev/build/service-waiter:commit-fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9
          name: database-waiter
          resources: {}
          securityContext:
            privileged: false
            runAsUser: 31001
        - args:
            - -v
            - messagebus
          env:
            - name: MESSAGEBUS_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: rabbitmq
            - name: MESSAGEBUS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: rabbitmq
            - name: MESSAGEBUS_CA
              valueFrom:
                secretKeyRef:
                  key: ca.crt
                  name: messagebus-certificates-secret-core
            - name: MESSAGEBUS_CERT
              valueFrom:
                secretKeyRef:
                  key: tls.crt
                  name: messagebus-certificates-secret-core
            - name: MESSAGEBUS_KEY
              valueFrom:
                secretKeyRef:
                  key: tls.key
                  name: messagebus-certificates-secret-core
          image: eu.gcr.io/gitpod-core-dev/build/service-waiter:commit-fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9
          name: msgbus-waiter
          resources: {}
          securityContext:
            privileged: false
            runAsUser: 31001
      priorityClassName: system-node-critical
      restartPolicy: Always
      serviceAccountName: ws-manager-bridge
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            name: ws-manager-bridge-config
          name: config
        - name: ws-manager-client-tls-certs
          secret:
            secretName: ws-manager-client-tls
status: {}
---
# apps/v1/Deployment image-builder-mk3
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: image-builder-mk3
    gitpod.io/nodeService: image-builder-mk3
  name: image-builder-mk3
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitpod
      component: image-builder-mk3
      gitpod.io/nodeService: image-builder-mk3
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        gitpod.io/checksum_config: 6e3d5cfc1522808ae9c1227ddddbd907fbe1c86b5908fe8210df77073662bc8b
      creationTimestamp: null
      labels:
        app: gitpod
        component: image-builder-mk3
        gitpod.io/nodeService: image-builder-mk3
      name: image-builder-mk3
      namespace: default
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_meta
                    operator: Exists
      containers:
        - args:
            - run
            - --config
            - /config/image-builder.json
          env:
            - name: GITPOD_DOMAIN
              value: localhost
            - name: GITPOD_INSTALLATION_LONGNAME
              value: localhost
            - name: GITPOD_INSTALLATION_SHORTNAME
              value: localhost
            - name: GITPOD_REGION
              value: local
            - name: HOST_URL
              value: https://localhost
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBE_DOMAIN
              value: svc.cluster.local
            - name: LOG_LEVEL
              value: info
            - name: JAEGER_DISABLED
              value: "true"
          image: eu.gcr.io/gitpod-core-dev/build/image-builder-mk3:commit-7e0d3291c519f0fc07079236bd1393f06788c35e
          imagePullPolicy: IfNotPresent
          name: image-builder-mk3
          ports:
            - containerPort: 8080
              name: service
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            privileged: false
            runAsUser: 33333
          volumeMounts:
            - mountPath: /config/image-builder.json
              name: configuration
              subPath: image-builder.json
            - mountPath: /wsman-certs
              name: wsman-tls-certs
              readOnly: true
            - mountPath: /config/pull-secret.json
              name: pull-secret
              subPath: .dockerconfigjson
            - mountPath: /etc/ssl/certs
              name: cacerts
              readOnly: true
        - args:
            - --v=5
            - --logtostderr
            - --insecure-listen-address=[$(IP)]:9500
            - --upstream=http://127.0.0.1:9500/
          env:
            - name: IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          image: quay.io/brancz/kube-rbac-proxy:v0.11.0
          name: kube-rbac-proxy
          ports:
            - containerPort: 9500
              name: metrics
          resources:
            requests:
              cpu: 1m
              memory: 30Mi
          securityContext:
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePolicy: FallbackToLogsOnError
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      initContainers:
        - command:
            - bash
            - -c
            - set -e; update-ca-certificates -f; cp /etc/ssl/certs/* /ssl-certs; echo
              'OK'
          image: eu.gcr.io/gitpod-core-dev/build/ca-updater:commit-f0c0c87899d21b0502c36036cdea091015b90c7a
          imagePullPolicy: IfNotPresent
          name: update-ca-certificates
          resources: {}
          volumeMounts:
            - mountPath: /ssl-certs
              name: cacerts
            - mountPath: /usr/local/share/ca-certificates/gitpod-ca.crt
              name: gitpod-ca-certificate
              subPath: ca.crt
      restartPolicy: Always
      serviceAccountName: image-builder-mk3
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            name: image-builder-mk3-config
          name: configuration
        - name: wsman-tls-certs
          secret:
            secretName: ws-manager-client-tls
        - name: pull-secret
          secret:
            secretName: builtin-registry-auth
        - emptyDir: {}
          name: gitpod-ca-certificate
        - emptyDir: {}
          name: cacerts
status: {}
---
# batch/v1/Job migrations
apiVersion: batch/v1
kind: Job
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: migrations
    gitpod.io/nodeService: migrations
  name: migrations
  namespace: default
spec:
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: migrations
        gitpod.io/nodeService: migrations
      name: migrations
      namespace: default
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gitpod.io/workload_meta
                    operator: Exists
      containers:
        - command:
            - sh
            - -c
            - cd /app/node_modules/@gitpod/gitpod-db && yarn run wait-for-db && yarn run
              typeorm migration:show || true && yarn run typeorm migration:run
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  key: host
                  name: mysql
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: mysql
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: mysql
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: mysql
            - name: DB_ENCRYPTION_KEYS
              valueFrom:
                secretKeyRef:
                  key: encryptionKeys
                  name: mysql
            - name: DB_DELETED_ENTRIES_GC_ENABLED
              value: "false"
          image: eu.gcr.io/gitpod-core-dev/build/db-migrations:commit-0d0df6ce5870c0fc136687844f4d0f153f2f4101
          imagePullPolicy: IfNotPresent
          name: migrations
          resources: {}
      enableServiceLinks: false
      initContainers:
        - args:
            - -v
            - database
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  key: host
                  name: mysql
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: mysql
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: mysql
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: mysql
            - name: DB_ENCRYPTION_KEYS
              valueFrom:
                secretKeyRef:
                  key: encryptionKeys
                  name: mysql
            - name: DB_DELETED_ENTRIES_GC_ENABLED
              value: "false"
          image: eu.gcr.io/gitpod-core-dev/build/service-waiter:commit-fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9
          name: database-waiter
          resources: {}
          securityContext:
            privileged: false
            runAsUser: 31001
      restartPolicy: Never
      serviceAccountName: migrations
  ttlSecondsAfterFinished: 60
status: {}
---
# batch/v1/CronJob gitpod-telemetry
apiVersion: batch/v1
kind: CronJob
metadata:
  creationTimestamp: null
  labels:
    app: gitpod
    component: gitpod
    gitpod.io/nodeService: gitpod
  name: gitpod-telemetry
  namespace: default
spec:
  concurrencyPolicy: Replace
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      creationTimestamp: null
      labels:
        app: gitpod
        component: gitpod
        gitpod.io/nodeService: gitpod
      name: gitpod-telemetry
      namespace: default
    spec:
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: gitpod
            component: gitpod
            gitpod.io/nodeService: gitpod
          name: gitpod-telemetry
          namespace: default
        spec:
          containers:
            - args:
                - send
              env:
                - name: GITPOD_INSTALLATION_VERSION
                  value: release-2022.02.0.1
                - name: SERVER_URL
                  value: http://server.default.svc.cluster.local:9000
              image: eu.gcr.io/gitpod-core-dev/build/installation-telemetry:commit-5967f965d3c34f9e9720f19fd20a2307d7b769ad
              imagePullPolicy: IfNotPresent
              name: gitpod-telemetry
              resources: {}
          enableServiceLinks: false
          initContainers:
            - args:
                - -v
                - database
              env:
                - name: DB_HOST
                  valueFrom:
                    secretKeyRef:
                      key: host
                      name: mysql
                - name: DB_PORT
                  valueFrom:
                    secretKeyRef:
                      key: port
                      name: mysql
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: mysql
                - name: DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: mysql
                - name: DB_ENCRYPTION_KEYS
                  valueFrom:
                    secretKeyRef:
                      key: encryptionKeys
                      name: mysql
                - name: DB_DELETED_ENTRIES_GC_ENABLED
                  value: "false"
              image: eu.gcr.io/gitpod-core-dev/build/service-waiter:commit-fbb3e1d7cf1ae8c31a8db44029e9a6d6660cbbb9
              name: database-waiter
              resources: {}
              securityContext:
                privileged: false
                runAsUser: 31001
          restartPolicy: OnFailure
          serviceAccountName: gitpod
  schedule: '@daily'
  successfulJobsHistoryLimit: 3
status: {}
